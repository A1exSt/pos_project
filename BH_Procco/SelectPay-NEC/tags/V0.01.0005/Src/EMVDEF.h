/*
*%-----------------------------------------------------------------------------
*% File........... : EmvDef.h
*% Class.......... : /
*% Description ... : This file contains the declaration of the structures and 
*%                   types used by all the EMV Package EMVLIB, EMVCO,EMVCLASS
*% Project........ : 8021/001 
*% Created ....... : 29/03/00
*% Author ........ : Guillaume REYDELLET
*%                 : Point of Sales Terminals
*%                 : SCHLUMBERGER Technologies
*%                 : 50, Avenue Jean Jaures, 92542 Montrouge Cedex, FRANCE
*% Version ....... : 1.00
*% Copyright ..... : (c) Copyright SCHLUMBERGER Technology Corporation
*%                 : unpublished work.
*%                 : This computer program includes Confidential, Proprietary
*%                 : Information and is a Trade Secret of SCHLUMBERGER
*%                 : Technology Copr. All use, disclosure, and/or reproduction
*%                 : is prohibited unless authorised in writing.
*%                 : All rights reserved.
*%-----------------------------------------------------------------------------
*%
*% $Revision ------------------------------------------------------------------
*% REV   DATE      BY    DESCRIPTION
*% ----  ----      ----  ------------------------------------------------------
*% 1.00  29.03.00  GR    Initial Version
*%
*%-----------------------------------------------------------------------------
*/

#ifndef __EMVDEF_H__
   #define __EMVDEF_H__                      // this avoids multiple inclusions

/*-----------------------------------------------------------------------------
* Card Application Specification
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_311,
	VIS_132
}
EMV_APP_SPECIFICATION;


/*-----------------------------------------------------------------------------
* EMV specification version
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_V311_OLD,			/* DO NOT USE !!! */
	EMV_V311,
	EMV_V400
}
EMV_VERSION;

/*-----------------------------------------------------------------------------
* Card Application Specification
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_AID_FULL_MATCH,
	EMV_AID_PARTIAL_MATCH,
	EMV_AID_PARTIAL_MATCH_VISA,	// OBSOLETE: Please DO NOT USE
	EMV_AID_PARTIAL_MATCH_EUROPAY	// OBSOLETE: Please DO NOT USE
}
EMV_AID_MATCHING_CRITERIA;

/*-----------------------------------------------------------------------------
* Format of data element
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_BINARY_DATA,
	EMV_NUMERIC_DATA,
	EMV_COMPRESSED_NUMERIC_DATA,
	EMV_ALPHANUMERIC_DATA,
	EMV_ALPHANUMERIC_SPECIAL_DATA,
	EMV_FORMAT_VAR,
	//-*-*-* Modification TML00005-01 for EMVOBJTS 1.11 PB4.1
	EMV_FORMAT_NOT_CHECKED,
	//-*-*-* End of Modification TML00005-01 for EMVOBJTS 1.11 PB4.1
	//-*-*-* Modification TML802100100030-01 for EMV Pack 3.00 PB10
	EMV_ALPHANUMERIC_SPECIAL_EXTENDED_DATA
	//-*-*-* End of Modification TML802100100030-01 for EMV Pack 3.00 PB10
}
EMV_DATA_FORMAT;

/*-----------------------------------------------------------------------------
* type of cryptogram resulting from the Terminal Action Analysis
-----------------------------------------------------------------------------*/
typedef enum
{
	/* For public use: ENJOY ! */
	EFT_TC,
	EFT_ARQC,
	EFT_AAC,
	
	/* EMV Pack's private use: FORBIDDEN ! */
	EFT_CombiDDA = 0x10,
	EFT_TC_CombiDDA = EFT_CombiDDA,
	EFT_ARQC_CombiDDA,
	EFT_AAC_CombiDDA
}
EFT_CRYPTOGRAM_TYPE;

/*-----------------------------------------------------------------------------
* Type of cryptogram generated by the card during Card Action Analysis
-----------------------------------------------------------------------------*/
typedef enum {
	CARD_TC,
	CARD_ARQC,
	CARD_AAC,
	CARD_AAR
}
CARD_CRYPTOGRAM_TYPE;

/*-----------------------------------------------------------------------------
* Payment System Specific Cryptogram generated by the card during 
* Card Action Analysis (EMV version >= 4.0 only)
-----------------------------------------------------------------------------*/
typedef enum {
	SPECIFIC_00,
	SPECIFIC_01,
	SPECIFIC_10,
	SPECIFIC_11
}
SPECIFIC_CRYPTOGRAM_TYPE;

/*-----------------------------------------------------------------------------
* Reason field in Cryptogram Information in GENERATE AC response
* See Card specification 3.1.1., table II.17
-----------------------------------------------------------------------------*/
typedef enum {
	GENAC_NO_INFORMATION,
	GENAC_SERVICE_NOT_ALLOWED,
	GENAC_PIN_BLOCKED,
	GENAC_ISSUER_NOT_AUTHENTIFIED,
	GENAC_UNKNOWN_REASON
}
CAA_REASON;

/*-----------------------------------------------------------------------------
* Card Communication Protocol
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_CARD_T0,
	EMV_CARD_T1
}
EMV_CARD_PROTOCOL;

/*-----------------------------------------------------------------------------
* PIN format used in VERIFY command
* See EMV Card Specification, part II, page II.29, table II.33
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_PIN_FORMAT_PLAINTEXT,
	EMV_PIN_FORMAT_ENCIPHERED,
	EMV_PIN_FORMAT_UNSPECIFIED
}
EMV_PIN_FORMAT;

/*-----------------------------------------------------------------------------
* Type of PIN entry devices
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_PLAINTEXT_DEVICE,
	EMV_RSA_ENCRYPTING_DEVICE,
	EMV_SLB_SPP_DEVICE		
}
EMV_PIN_DEVICE;

/*-----------------------------------------------------------------------------
* types of Offline Data Authentication
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_STATIC_DA,
	EMV_DYNAMIC_DA,
	EMV_NO_DA,
	EMV_COMBINED_DDA_GEN_AC		/* For EMV version >= 4.0 only */
}
EMV_DA_TYPE;

/*-----------------------------------------------------------------------------
* types of issuer scripts
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_ISSUER_SCRIPT_BEFORE_COMPLETION,
	EMV_ISSUER_SCRIPT_AFTER_COMPLETION
}
EMV_SCRIPT_TYPE;

/*-----------------------------------------------------------------------------
* transaction type
-----------------------------------------------------------------------------*/
typedef enum
{
	EMV_GOODS_TRANSACTION,
	EMV_SERVICES_TRANSACTION,
	EMV_MANUAL_CASH_TRANSACTION,
	EMV_UNATTENDED_CASH_TRANSACTION,
	EMV_OTHER_TRANSACTION_TYPE
}
EMV_TRANSACTION_TYPE;

/*-----------------------------------------------------------------------------
* chained structure to pass a list of revocated certificates serial numbers
* for the same RID and same CAPK Index
-----------------------------------------------------------------------------*/

typedef struct {
	unsigned char* pbSerialNumber;    // pointer on revocated certificate serial number
	void*          pNextSerialNumber; // pointer on next struxture
}
EMV_REVOCATED_CERTIFICATES;

/*-----------------------------------------------------------------------------
* literals used to define the length of data objects
-----------------------------------------------------------------------------*/
#define	NCA_LENGTH 248
//-*-*-* Modification TML00005-01 for EMVOBJTS 1.11 PB3
#define NI_LENGTH  248
#define NIC_LENGTH 248
#define NPE_LENGTH 248
//-*-*-* End of Modification TML00005-01 for EMVOBJTS 1.11 PB3

/*-----------------------------------------------------------------------------
* literals for CVM Codes as defined in EMV 3.1.1. Application Specification
* Annex A3
-----------------------------------------------------------------------------*/
#define	EMV_CVM_FAIL                          0x00
#define	EMV_CVM_PLAINTEXT_PIN                 0x01
#define	EMV_CVM_ONLINE_PIN                    0x02
#define	EMV_CVM_PLAINTEXT_PIN_N_SIGNATURE     0x03
#define	EMV_CVM_ENCIPHERED_PIN                0x04 
#define	EMV_CVM_ENCIPHERED_PIN_N_SIGNATURE    0x05
#define	EMV_CVM_SIGNATURE                     0x1E
#define	EMV_CVM_NONE                          0x1F 

/*-----------------------------------------------------------------------------
* literals related to script processing
-----------------------------------------------------------------------------*/
#define	EMV_SCRIPT_MAX_LENGTH         128
#define EMV_SCRIPT_COMMAND_MIN_LENGTH 6    // Tag + Length + CLA INS P1 P2
#define EMV_SCRIPT_MIN_LENGTH         8    // Tag + Length + 1 command
#define EMV_SCRIPT_MAX_NB_COMMANDS    ( EMV_SCRIPT_MAX_LENGTH - 2 ) / EMV_SCRIPT_COMMAND_MIN_LENGTH   
				      // = 21
#define EMV_MAX_NB_SCRIPTS            EMV_SCRIPT_MAX_LENGTH / EMV_SCRIPT_MIN_LENGTH   
				      // = 16

/*-----------------------------------------------------------------------------
* structure containing the ICC data
-----------------------------------------------------------------------------*/
typedef struct {
	
	// Data returned by the SELECT and GET PROCESSING OPTIONS commands
	// and accessible by the application through 'Get' functions
	unsigned char Label[5+16];
	unsigned char PreferredName[5+16];
	unsigned char IssuerCodeTable[5+1];
	unsigned char Language[5+8];
	unsigned char IssuerFCI[5+222];

	// Data returned by the SELECT and GET PROCESSING OPTIONS commands
	// and NOT accessible by the application
	unsigned char PDOL[5+256];
	unsigned char DFName[5+16];
	unsigned char PriorityIndicator[5+1];
	
	// Data Returned by GET PROCESSING OPTIONS
	unsigned char AIP[5+2];
	unsigned char AFL[5+252];
						
	// data retrieved with READ RECORD and used during transaction processes
	// these data elements are NOT accessible by the application
	unsigned char VersionNumber[5+2];
	unsigned char CDOL1[5+252];
	unsigned char CDOL2[5+252];
	unsigned char DDOL[5+252];
	unsigned char PINPKCertificate[5+NI_LENGTH];
	unsigned char PINPKExponent[5+3];
	unsigned char PINPKRemainder[5+41];
	unsigned char ICCPKCertificate[5+NI_LENGTH];
	unsigned char ICCPKRemainder[5+41];
	unsigned char ICCPKExponent[5+3];
	unsigned char IssuerPKCertificate[5+NCA_LENGTH];
	unsigned char IssuerPKRemainder[5+35];
	unsigned char IssuerPKExponent[5+3];
	unsigned char LowerOfflineLimit[5+1];
	unsigned char UpperOfflineLimit[5+1];
	unsigned char SignedStaticData[5+NI_LENGTH];
	unsigned char SDATagList[5+256];
	unsigned char TDOL[5+252];
			
	// data retrieved with READ RECORD and accessible by the application by the application
	unsigned char UsageControl[5+2];
	unsigned char EffectiveDate[5+3];
	unsigned char ExpirationDate[5+3];
	unsigned char CVMList[5+252];
	unsigned char DefaultIAC[5+5];
	unsigned char DenialIAC[5+5];
	unsigned char OnlineIAC[5+5];
	unsigned char CurrencyCode[5+2];
	unsigned char CurrencyExponent[5+1];
	unsigned char DiscretionaryData[5+32];
	unsigned char PAN[5+10];
	unsigned char PANSeqNumber[5+1];
	unsigned char RefCurrency[8+5];
	unsigned char RefCurrencyExponent[5+4];
	unsigned char CardholderName[5+26];
	unsigned char CardholderExtName[5+45];
	unsigned char CAPKIndex[5+1];
	unsigned char IssuerCountryCode[5+2];
	unsigned char ServiceCode[5+2];
	unsigned char Track1Discretionary[5+256]; // 83 ?
	unsigned char Track2Discretionary[5+256]; // 24 ?
	unsigned char Track2[5+19];
	
	// Data rtrieved from GENERATE AC
	unsigned char IssuerApplicationData[5+32];  // up to 32, 9F10
	unsigned char ApplicationCryptogram[5+8];
	unsigned char CryptogramInformation[5+1]; 

	// Data retrieved from GET DATA
	unsigned char ATC[5+2];
	unsigned char LastATCRegister[5+2];
	unsigned char PINTryCounter[5+1];
	
	// Data retreived during DA
	unsigned char DataAuthenticationCode[5 + 2]; // SDA
	unsigned char ICCDynamicNumber[5+8];
	unsigned char SignedDynamicData[ 5 + NIC_LENGTH ];
}
EMVICC_CARD_DATA;

#endif

/* end of file EmvDef.h */