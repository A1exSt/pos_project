//============================================================================
// Name        : filedownload.c
// Author      :tuxq
// Version     :
// Copyright   : Your copyright notice
// Description : Ansi-style
//============================================================================
#include "..\inc\global.h"

//read file info
static void sv_ReadFile(SFileInfo stTaskInfo)
{
	int iRet=0, iFd=0, iFileSize=0, iOffset=0, iReadLen=0;
	unsigned char aucBuff[800+1];

	iFd = PdkFile_Open((char *)stTaskInfo.ucFileName);
#ifdef FILEDOWNLOAD_DEBUG
	AppLog("[sv_ReadFile] PdkFile_Open=%d, FileName=%s\n", iFd, stTaskInfo.ucFileName);
#endif
	if(iFd < 0)
	{
		return;
	}

	iFileSize = PdkFile_GetSize((char *)stTaskInfo.ucFileName);
#ifdef FILEDOWNLOAD_DEBUG
	AppLog("[sv_ReadFile] PdkFile_GetSize=%d, iFileSize=%d, iReadLen=%d\n", iRet, iFileSize);
#endif
	while(iOffset < iFileSize)
	{
		if(iFileSize - iOffset > 800)
		{
			iReadLen = 800;
		}
		else
		{
			iReadLen = iFileSize - iOffset;
		}

		memset(aucBuff, 0, sizeof(aucBuff));
		iRet = PdkFile_Read(iFd, aucBuff, iReadLen);
		if(iRet < 0)
		{
#ifdef FILEDOWNLOAD_DEBUG
			AppLog("[sv_ReadFile] PdkFile_Read=%d, iOffset=%d, iReadLen=%d\n", iRet, iOffset, iReadLen);
#endif
			PdkFile_Close(iFd);
			return;
		}

		AppStrLog("%s", aucBuff);

		iOffset += iRet;
	}

	PdkFile_Close(iFd);
}

static int DeleteFile(unsigned char *pucFileName)
{
	int iRet=0;

	iRet = PdkFile_Remove((char *)pucFileName);
#ifdef MPOS_PROTIMS_DEBUG
	AppLog("[sn_DeleteParamFile] PdkFile_Remove=%d, pucFileName=%s\n", iRet, pucFileName);
#endif
	return iRet;
}

static ushort GetFileType(const char *pszFileName)
{
	if(strstr(pszFileName, ".ui") != NULL)
	{
		return PARA_FILE;
	}
	else if(strstr(pszFileName, ".emv") != NULL)
	{
		return PARA_FILE;
	}
	else if(strstr(pszFileName, ".clss") != NULL)
	{
		return PARA_FILE;
	}
	else if(strstr(pszFileName, ".bmp") != NULL)
	{
		return PARA_FILE;
	}
	else if(strstr(pszFileName, ".lng") != NULL)
	{
		return PARA_FILE;
	}
	else if(strstr(pszFileName, ".bin") != NULL)
	{
		return APP_FILE_M;
	}
	else if(strstr(pszFileName, ".bin") != NULL)
	{
		return MONITOR_FILE;
	}
	else if(strstr(pszFileName, ".font") != NULL)
	{
		return FONT_FILE;
	}
	return PARA_FILE;
}

static int UpdateFirmware(const uchar ucTaskType, const REMOTE_LOAD_STEP eDownLoadStep, SFileInfo *sFileInfo)
{
	int iRet=0;
	uchar ucObject = 0x00;
	switch(ucTaskType)
	{
		case APP_FILE_M:
		case MONITOR_FILE:
			ucObject = 0x00;
			break;

		case FONT_FILE: 
			ucObject = 0x01;
			break;

		default:
			break;
	}
	if(eDownLoadStep == REMOTE_LOAD_BEGIN){
		iRet = RemoteLoad(ucObject, REMOTE_LOAD_BEGIN, NULL, sFileInfo->uiFileSize);
#ifdef FILEDOWNLOAD_DEBUG
		AppLog("DownloadFile  UpdateFirmware REMOTE_LOAD_BEGIN iRet = %d\n",iRet);
		AppLog("DownloadFile  UpdateFirmFile RemoteLoad eRemoteLoadStep = %d\n",eDownLoadStep);
#endif
		if(iRet != 0){
			return FILEDOWNLOAD_ERR_FIRMWARE_SAVE_BEGIN;
		}
	}
	iRet = RemoteLoad(ucObject, REMOTE_LOAD_WRITE, sFileInfo->ucFileContent, sFileInfo->uiCurFileSize);
#ifdef FILEDOWNLOAD_DEBUG
	AppLog("DownloadFile  UpdateFirmware REMOTE_LOAD_WRITE iRet = %d\n",iRet);
	AppLog("DownloadFile  UpdateFirmFile RemoteLoad eRemoteLoadStep = %d\n",eDownLoadStep);
#endif
	if(iRet != 0){
		return FILEDOWNLOAD_ERR_FIRMWARE_SAVE_WRITE;
	}

	if(eDownLoadStep == REMOTE_LOAD_END){
		iRet =RemoteLoad(ucObject, REMOTE_LOAD_END, NULL, 0);
#ifdef FILEDOWNLOAD_DEBUG
		AppLog("DownloadFile  UpdateFirmware REMOTE_LOAD_END iRet = %d\n",iRet);
		AppLog("DownloadFile  UpdateFirmFile RemoteLoad eRemoteLoadStep = %d\n",eDownLoadStep);
#endif
		if(iRet != 0){
			return FILEDOWNLOAD_ERR_FIRMWARE_SAVE_END;
		}

		g_ucRebootFlag = 0x01;	// Added by ZhangYuan 2016-10-27 reboot if download app/monitor/font success
	}
#ifdef FILEDOWNLOAD_DEBUG
	AppLog("DownloadFile  UpdateFirmware eDownLoadStep = %d\n",eDownLoadStep);
	AppLog("DownloadFile  UpdateFirmFile RemoteLoad iRet = %d\n",iRet);
#endif
	return 0;
}

static int UpdateParamFile(const SFileInfo sFileInfo){
	int iFd = 0, iRet = 0;
	uint uiCurFileSize = 0;
	iRet = PdkFile_Exist((char*)sFileInfo.ucFileName);
	if(iRet == PDK_RET_OK && (char*)sFileInfo.uiFileOffset == 0){
		PdkFile_Remove((char*)sFileInfo.ucFileName);
	}

	//if file not exist,create one;if exist,open it
	iFd = PdkFile_Open ((char*)sFileInfo.ucFileName);
	#ifdef FILEDOWNLOAD_DEBUG
	AppLog("UpdateParamFile  PdkFile_Open iFd = %d\n",iFd);
	#endif
	if(iFd < 0){
		#ifdef FILEDOWNLOAD_DEBUG
		AppLog("UpdateParamFile  PdkFile_Open iFd = %d\n",iFd);
		#endif
		return iFd;
	}
#ifdef FILEDOWNLOAD_DEBUG
	AppLog("UpdateParamFile  PdkFile_GetSize uiCurFileSize = %d\n",uiCurFileSize);
	AppLog("UpdateParamFile  PdkFile_GetSize sFileInfo.uiCurFileSize = %d\n",sFileInfo.uiCurFileSize);
	AppLog("UpdateParamFile  PdkFile_GetSize sFileInfo.uiFileSize = %d\n",sFileInfo.uiFileSize);
	AppLog("UpdateParamFile  PdkFile_GetSize sFileInfo.ucFileName = %s\n",sFileInfo.ucFileName);
#endif
	iRet = PdkFile_Seek (iFd, sFileInfo.uiFileOffset, SEEK_SET);//relocate file
	if(iRet < 0)
	{
		PdkFile_Close(iFd);
		return iRet;
	}
	#ifdef FILEDOWNLOAD_DEBUG
	AppLog("UpdateParamFile  PdkFile_Seek iRet = %d\n",iRet);
	#endif
	iRet = PdkFile_Write (iFd, sFileInfo.ucFileContent, sFileInfo.uiCurFileSize);//byte
	#ifdef FILEDOWNLOAD_DEBUG
	AppLog("UpdateParamFile  PdkFile_Write iRet = %d\n",iRet);
	#endif
	if(iRet < 0){
		PdkFile_Close(iFd);
		return iRet;
	}
	iRet = PdkFile_Close(iFd);
	if(iRet < 0)
	{
		return iRet;
	}

	return 0;
}

int  DownloadFile(const uchar *pucRequest)
{
	int iRet = 0,iFd = 0;
	SFileInfo sFileInfo;
	ushort usFileType = 0;
	uint uiReqOffset = 0, uiLength = 0, uiCurFileSize = 0, uiFileOffset = 0;
	REMOTE_LOAD_STEP eDownLoadStep = REMOTE_LOAD_BEGIN;
	memset(&sFileInfo, 0, sizeof(SFileInfo));

	uiLength = (uint)pucRequest[0]<<8 | pucRequest[1];
	#ifdef FILEDOWNLOAD_DEBUG
	AppLog("DownloadFile uiLength = %d\n",uiLength);
	#endif

	uiReqOffset += 2;
	memcpy(sFileInfo.ucFileName, pucRequest + uiReqOffset, uiLength);
	uiReqOffset +=  uiLength;
	sFileInfo.uiFileSize = (uint)pucRequest[uiReqOffset]<<24 | (uint)pucRequest[uiReqOffset+1]<<16 | (uint)pucRequest[uiReqOffset+2]<<8 |(uint)pucRequest[uiReqOffset+3];
	uiReqOffset += sizeof(uint);
	sFileInfo.uiFileOffset = (uint)pucRequest[uiReqOffset]<<24 | (uint)pucRequest[uiReqOffset+1]<<16 | (uint)pucRequest[uiReqOffset+2]<<8 |(uint)pucRequest[uiReqOffset+3];
	uiReqOffset += sizeof(uint);
	sFileInfo.uiCurFileSize = (uint)pucRequest[uiReqOffset]<<24 | (uint)pucRequest[uiReqOffset+1]<<16 | (uint)pucRequest[uiReqOffset+2]<<8 |(uint)pucRequest[uiReqOffset+3];
	uiReqOffset += sizeof(uint);

	if(sFileInfo.uiCurFileSize > BLK_LENGTH_MAX){
		return FILEDOWNLOAD_ERR_BLKOVERSIZE;
	}
	memcpy(sFileInfo.ucFileContent, pucRequest + uiReqOffset, sFileInfo.uiCurFileSize);
	#ifdef FILEDOWNLOAD_DEBUG
	AppLog("DownloadFile uiReqOffset = %d\n",uiReqOffset);
	AppLog("DownloadFile  sFileInfo.ucFileContent = %s\n",sFileInfo.ucFileContent);
	#endif

	g_IdeUi = 0x01;	// Added by ZhangYuan 2016-10-27

	//download step
	if(sFileInfo.uiFileOffset == 0 && sFileInfo.uiCurFileSize != 0)
	{
#ifdef FILEDOWNLOAD_DEBUG
		AppLog("DownloadFile sFileInfo.uiFileSize = %d\n",sFileInfo.uiFileSize);
		AppLog("DownloadFile sFileInfo.uiFileOffset = %d\n",sFileInfo.uiFileOffset);
		AppLog("DownloadFile SFileInfo.uiCurFileSize = %d\n",sFileInfo.uiCurFileSize);
#endif
		eDownLoadStep = REMOTE_LOAD_BEGIN;
	}
	else if(sFileInfo.uiFileSize == (sFileInfo.uiFileOffset + sFileInfo.uiCurFileSize))
	{
#ifdef FILEDOWNLOAD_DEBUG
		AppLog("DownloadFile sFileInfo.uiFileSize = %d\n",sFileInfo.uiFileSize);
		AppLog("DownloadFile sFileInfo.uiFileOffset = %d\n",sFileInfo.uiFileOffset);
		AppLog("DownloadFile SFileInfo.uiCurFileSize = %d\n",sFileInfo.uiCurFileSize);
#endif
		eDownLoadStep = REMOTE_LOAD_END;
		
		g_IdeUi = 0x00;	// Added by ZhangYuan 2016-10-27		
	}
	else 
	{
#ifdef FILEDOWNLOAD_DEBUG
		AppLog("DownloadFile sFileInfo.uiFileOffset = %d\n",sFileInfo.uiFileOffset);
#endif
		eDownLoadStep = REMOTE_LOAD_WRITE;
	}

	// === Added by ZhangYuan 2016-10-27 
#ifdef EUI_
	// TODO
#else
//	ScrPrint(0,2,CFONT,"%s:", sFileInfo.ucFileName);
	PubDispString(sFileInfo.ucFileName, 2|DISP_LINE_CENTER);
	ScrPrint(0,4,CFONT,"  Completed:%d%", (sFileInfo.uiFileOffset * 100)/sFileInfo.uiFileSize);
#endif
	// === Added end
	
	//get file type
	usFileType = GetFileType((char*)sFileInfo.ucFileName);
	AppLog("DownloadFile GetFileType usFileType = %d, %s\n",usFileType, sFileInfo.ucFileName);
	switch(usFileType){
	case PARA_FILE:
		iRet = UpdateParamFile(sFileInfo);
		#ifdef FILEDOWNLOAD_DEBUG
		AppLog("DownloadFile  UpdateParamFile iRet = %d\n",iRet);
		#endif
		if(iRet == 0){
//			sv_ReadFile(sFileInfo);
//			return 0;
			break;
		}
		else{
			return FILEDOWNLOAD_ERR_PARAFILE_SAVE;
		}
		break;
	case MONITOR_FILE:
	case FONT_FILE:
	case APP_FILE_M:
		iRet = UpdateFirmware(usFileType, eDownLoadStep, &sFileInfo);
#ifdef FILEDOWNLOAD_DEBUG
		AppLog("DownloadFile  UpdateFirmware eDownLoadStep = %d\n",eDownLoadStep);
		AppLog("DownloadFile  UpdateFirmFile  iRet = %d\n",iRet);
#endif
		if(iRet == 0){
//			sv_ReadFile(sFileInfo);
//			return iRet;
			break;
		}
		else{
			AppLog("DownloadFile  UpdateFirmware eDownLoadStep = %d\n",eDownLoadStep);
			AppLog("DownloadFile  UpdateFirmFile  iRet = %d\n",iRet);
			return FILEDOWNLOAD_ERR_FIRMFILE_SAVE;
		}
		break;
	default:
		break;
	}

	// === Added by ZhangYuan 2016-10-27 
	if(sFileInfo.uiFileOffset + sFileInfo.uiCurFileSize == sFileInfo.uiFileSize)
	{	
#ifdef EUI_
		// TODO
#else
		PubDispString(sFileInfo.ucFileName, 2|DISP_LINE_CENTER);
		ScrPrint(0,4,CFONT,"  Completed:100%");
#endif
		Beep();
		DelayMs(150);
		ScrCls();
		g_IdeUi = 0x00;
	}
	// === Added end
	
	return 0;
}


