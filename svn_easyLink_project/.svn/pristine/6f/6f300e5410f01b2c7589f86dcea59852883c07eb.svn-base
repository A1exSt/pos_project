//============================================================================
// Name        : ui.c
// Author      :tuxq
// Version     :
// Copyright   : Your copyright notice
// Description : Ansi-style
//============================================================================
#include "../inc/global.h"

extern int BmpConvert(unsigned char *pucFileName, unsigned char *pucConvBmp, unsigned int uiConvBmpSize); // === Added by ZhangYuan 2016-11-15


static ST_INPUTTYPE stTypeList[]={
		{INPUT_TYPE_NUM, NUM},
		{INPUT_TYPE_ALPHA, ALPHA},
		{INPUT_TYPE_DECIMAL, DECIMAL},
		{INPUT_TYPE_PASSWARD, PASSWARD},
		{INPUT_TYPE_NUMALPHA,NUMALPHA},
		{INPUT_TYPE_PINPAD,PIN_PAD},
};

int GetItemNum(uchar *ss,uchar c, int iSize)
{
	 int count = 0, i = 0;
	 for(i = 0; i < iSize; ss++, i++){
	 	if( *ss == c){
	  		count++;
	 	}
	 }
  	return count;
 }

int GetInputType(uchar ucTypeIndex){
	int i = 0;
	for(;i < sizeof(stTypeList)/sizeof(ST_INPUTTYPE); i++){
		if(ucTypeIndex == stTypeList[i].ucTypeIndex){
			return stTypeList[i].ucTypeValue;
		}
	}
	return EL_UI_RET_INPUT_TYPE_ERROR;
}

void GetSubStr(char * dest, const char *src, uchar *ucFont){
	int iLen = strlen(src);
	uchar tempbuff[32] = {0};
	if(*ucFont == 0){
			if(iLen > 21){
				strncpy(tempbuff, src, 18);
				sprintf(dest, "%s...\0", tempbuff);
			}
			else{
				memcpy(dest, src, iLen+1);
			}
	}
	if(*ucFont != 0){
			if(iLen > 16){
				strncpy(tempbuff, src, 13);
				sprintf(dest, "%s...\0", tempbuff);
			}
			else{
				memcpy(dest, src, iLen+1);
			}
	}

}

static int SetShowAlign(char * pszInfo, int iAlign, int iFontSize)
{
	int iXLocation =0;
	int iLen = 0;
	iLen = strlen(pszInfo);//length
	ComDebugTx("SetShowAlign iLen = %d \n", iLen);
/*	if((iFontSize == 0 && iLen >21)){
		return EL_UI_RET_VALUESIZEERROR;
	}
	if((iFontSize != 1 && iLen > 16)){
		return EL_UI_RET_VALUESIZEERROR;
	}
*/	
	if(pszInfo != NULL){
		if(iAlign == ALIGN_LEFT){
			iXLocation = 0;
		}
		
		if(iAlign == ALIGN_CENTER){
			if(iFontSize == 0){
				iXLocation = (128 - 6*iLen)/2;
				ComDebugTx("SetShowAlign ALIGN_CENTER iFontSize0 iXLocation = %d \n", iXLocation);
			}
			if(iFontSize != 0){
				iXLocation = (128 - 8*iLen)/2;
				ComDebugTx("SetShowAlign ALIGN_CENTER iFontSize1 iXLocation = %d \n", iXLocation);
			}
		}

		if(iAlign == ALIGN_RIGHT){
			if(iFontSize == 0){
				iXLocation = 128 - 6*iLen;
				ComDebugTx("SetShowAlign ALIGN_RIGHT iFontSize0 iXLocation = %d \n", iXLocation);
			}
			if(iFontSize != 0){
				iXLocation = 128 - 8*iLen;
				ComDebugTx("SetShowAlign ALIGN_RIGHT iFontSize1 iXLocation = %d \n", iXLocation);
			}
		}
	}
	
	return iXLocation;
}


/* fontType: 	 0 - 6x8/16x16		21个宽x 高
			 1 - 8x16/16x16		16个
			 2 - 12x24/24x24		10个
*/
static void SetCustomizedFont(int iFontType)
{
	ST_FONT singleFont, doubleFont;

	memset(&singleFont, 0, sizeof(ST_FONT));
	memset(&doubleFont, 0, sizeof(ST_FONT));

	singleFont.CharSet = CHARSET_WEST;
	doubleFont.CharSet = CHARSET_GB2312;

	if (0 == iFontType){
		singleFont.Width = 6;
		singleFont.Height = 8;
		doubleFont.Width = 16;
		doubleFont.Height = 16;
	}
	else if (0 != iFontType){
		singleFont.Width = 8;
		singleFont.Height = 16;
		doubleFont.Width = 16;
		doubleFont.Height = 16;
	}

	ScrSelectFont(&singleFont, &doubleFont);
}


int MenuProcess(int iItemNum, ST_MENU_WIDGET* pstMenu, unsigned short uiTimeOut){
	int		iTotalPage, iCurrentPage;
	uchar	ucKey;
	
	if ( (0 >= iItemNum) || (NULL == pstMenu) )
	{
		return -1;
	}

	iTotalPage = (iItemNum+1)/2; 	// Get the total page to show all items
	iCurrentPage = 0;
//	ScrCls();

	while (1)
	{
		ScrClrLine(2, 5);	// clear the items on previous page
		ScrClrRect(91, 0, 127, 16);		// clear the "up" "down" promption on previous page
		if (iCurrentPage*2 < iItemNum)
		{
			ScrPrint(0, 2, pstMenu[iCurrentPage*2].fontsize, "1.%s", pstMenu[iCurrentPage*2].value);
#ifdef UI_DEBUG_			
			ComDebugTx("MenuProcess menuitem1 = %s \n", pstMenu[iCurrentPage*2].value);
#endif
		}
		if (iCurrentPage*2+1 < iItemNum)
		{
			ScrPrint(0, 4, pstMenu[iCurrentPage*2].fontsize, "2.%s", pstMenu[iCurrentPage*2+1].value);
#ifdef UI_DEBUG_
			ComDebugTx("MenuProcess menuitem2 = %s \n", pstMenu[iCurrentPage*2+1].value);
#endif
		}

		// take the last 36 dots of line 0 and line 1 to display prompt to tell user page down or page up.
		// 36 dots comes from:  strlen("6-DOWN") is 6 characters. With ASCII font, it will take 6*6 dots to display this.
		if (iTotalPage > 1)
		{	
			if (0 != iCurrentPage)
			{
				ScrPrint(91, 0, ASCII, "6-UP");
			}
			if ((iTotalPage-1) != iCurrentPage)
			{
				ScrPrint(91, 1, ASCII, "9-DOWN");
			}
		}

		kbflush();
		ucKey = PubWaitKey(uiTimeOut);
		if (KEY1 == ucKey)
		{
			if (iCurrentPage*2 < iItemNum)
			{
				return iCurrentPage * 2;
			}
		}
		else if (KEY2 == ucKey)
		{
			if (iCurrentPage * 2 + 1 < iItemNum)
			{
				return iCurrentPage * 2 + 1;
			}
		}
		else if (KEY9 == ucKey)	// key 6 to page down. if it's the last page, then turn to the first page
		{
			if ((iTotalPage-1) == iCurrentPage)
			{
				iCurrentPage = 0;
			}
			else
			{
				iCurrentPage++;
			}
			continue;
		}
		else if (KEY6 == ucKey)	// key 3 to page up. if it's the first page, then turn to the last page
		{
			if (0 == iCurrentPage)
			{
				iCurrentPage = iTotalPage - 1;
			}
			else
			{
				iCurrentPage--;
			}
			continue;
		}
		else if (NOKEY == ucKey)
		{
			return -2;
		}
		else if (KEYCANCEL == ucKey)
		{
			return -3;
		}
	} 
	
	return -1;
}

static int SetElement(const uchar *buff, const uint uiMsgLength, const uchar *pucMsg, uchar *pucKeyAccept, uchar *pucResponse, const uchar ucTag){
	int   iRet = 0, xmlOffset = 0, iMsgOffset = 0, iLength = 0, iFd = 0, iFileSize = 0;
	uchar ucXLocation = 0;
	uchar ucMenuIndex = 0;

	uchar ucWidgetName[WIDGETNAME_LENGTH_MAX]={0};
	uchar ucTextBuff[MSG_LENGTH_MAX]={0};
	uchar ucPicBuff[1024]={0};
	uchar ucMenuItemBuff[MENUITEM_LENGTH_MAX]={0};

	uchar XmlTag = 1;
	uchar ucInputType = 0;
	uchar ucPinPadTag = 0;
	
	int iLoop = 0;
	int iSelected = 0;
	int iMenuItemNum = 0;

	ST_TEXTBOX_WIDGET stTextboxWidget;
	ST_PICTURE_WIDGET stPictureWidget;
	ST_INPUTBOX_WIDGET stInputboxWidget;
	ST_MENU_WIDGET stMenuWidget;

#ifdef UI_DEBUG_
	ComDebugTx("[SetElement] pucMsg = %s\n", pucMsg==NULL ? "pucMsg == NULL" : pucMsg);	// Modified by ZhangYuan 2016-11-17
#endif

	iMenuItemNum = GetItemNum(buff, MENUITEM, 1024);
#ifdef UI_DEBUG_
	ComDebugTx("SetElement iMenuItemNum = %d \n", iMenuItemNum);
#endif
	
	ScrCls();
	while( iMsgOffset <= uiMsgLength && XmlTag == 1){
			memset(ucWidgetName, 0, sizeof(ucWidgetName));
			memset(ucTextBuff, 0, sizeof(ucTextBuff));
			memset(ucPicBuff, 0, sizeof(ucPicBuff));
			switch(buff[xmlOffset]){
				case TEXTBOX:
#ifdef UI_DEBUG_
					ComDebugTx("TEXTBOX... \n");
					ComDebugTx("SetElement xmlOffset = %d \n", xmlOffset);
					ComDebugTx("SetElement buff[%d]=%d\n", xmlOffset, buff[xmlOffset]);
#endif
					xmlOffset++;
					memcpy(&stTextboxWidget, buff +xmlOffset, sizeof(ST_TEXTBOX_WIDGET));

					strcpy(pucKeyAccept, &stTextboxWidget.keyaccept);
#ifdef UI_DEBUG_
					AppLog("SetElement *pucKeyAccept = %d\n", *pucKeyAccept);
#endif
					
					SetCustomizedFont(stTextboxWidget.fontsize);
					ScrAttrSet(stTextboxWidget.mode);

					if(pucMsg != NULL){
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
						memcpy(ucWidgetName, pucMsg + iMsgOffset, iLength);
						iMsgOffset += iLength;
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
						memcpy(ucTextBuff,pucMsg + iMsgOffset, iLength);
						iMsgOffset += iLength;		
						if(strcmp(stTextboxWidget.name, ucWidgetName)==0 && ucTextBuff != NULL){
							memcpy(stTextboxWidget.value, ucTextBuff, sizeof(ucTextBuff));
							memset(ucTextBuff, 0, sizeof(ucTextBuff));
						}
						else if(strcmp(stTextboxWidget.name, ucWidgetName)!=0)
							return EL_UI_RET_INVALID_PARAM;
					}
					GetSubStr(ucTextBuff, stTextboxWidget.value, &stTextboxWidget.fontsize);
					ucXLocation = SetShowAlign(ucTextBuff, stTextboxWidget.textalign, stTextboxWidget.fontsize);
					if(ucXLocation == EL_UI_RET_VALUESIZEERROR){
						return EL_UI_RET_VALUESIZEERROR;
					}
					ScrTextOut(ucXLocation, stTextboxWidget.y, ucTextBuff);
					xmlOffset += sizeof(ST_TEXTBOX_WIDGET);
					break;
				
				case PICTUREBOX:
#ifdef UI_DEBUG_
					ComDebugTx("PICTUREBOX... \n");
#endif
					xmlOffset ++;
					memcpy(&stPictureWidget, buff +xmlOffset, sizeof(ST_PICTURE_WIDGET));

					if(pucMsg != NULL){
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
#ifdef UI_DEBUG_
						ComDebugTx("SetElement PICTUREBOX WidgetName's  iLength =  \n", iLength);
#endif
						memcpy(ucWidgetName, pucMsg + iMsgOffset, iLength);
						iMsgOffset +=  iLength;
						iLength = (ushort)pucMsg[iMsgOffset] | (ushort)pucMsg[iMsgOffset+1]<<8;
						iMsgOffset += sizeof(ushort);
						if(strcmp(stPictureWidget.name , ucWidgetName)==0){
							memcpy(&stPictureWidget.value, pucMsg + iMsgOffset, iLength);
						}
						else if(strcmp(stPictureWidget.name , ucWidgetName)!=0){
							return EL_UI_RET_INVALID_PARAM;
						}
						iMsgOffset += iLength;

					}
#ifdef UI_DEBUG_
					ComDebugTx("SetElement PICTUREBOX ucWidgetName = %s\n", ucWidgetName);
					ComDebugTx("SetElement PICTUREBOX ucWidgetName = %s\n", stPictureWidget.name);
#endif
					
					iRet = BmpConvert(stPictureWidget.value, ucPicBuff, sizeof(ucPicBuff));
#ifdef UI_DEBUG_
					ComDebugTx("SetElement PICTUREBOX BmpToUiLogo = %d\n", iRet);
#endif
					if(iRet == 0){
						ScrDrLogoxy(stPictureWidget.x, stPictureWidget.y, ucPicBuff);
					}
					xmlOffset += sizeof(ST_TEXTBOX_WIDGET);
					break;

					case INPUTBOX:
					if(ucTag == TAG_MOBILE){
						return EL_UI_RET_INVALID_PAGE;
					}
#ifdef UI_DEBUG_					
					ComDebugTx("SetElement buff[%d]=%d\n", xmlOffset, buff[xmlOffset]);
#endif					
					xmlOffset ++;
					memcpy(&stInputboxWidget, buff +xmlOffset, sizeof(ST_INPUTBOX_WIDGET));
#ifdef UI_DEBUG_
					AppHexLog("SetElement stInputBoxWidget Hex :", &stInputboxWidget, sizeof(ST_INPUTBOX_WIDGET));
#endif					
					if(pucMsg != NULL){
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
						memcpy(ucWidgetName, pucMsg + iMsgOffset, iLength);
						iMsgOffset +=  iLength;
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
						memcpy(ucTextBuff,pucMsg + iMsgOffset, iLength);
						iMsgOffset += iLength;	
						if(strcmp(stInputboxWidget.name, ucWidgetName)==0 && ucTextBuff != NULL){
							memcpy(stInputboxWidget.value, ucTextBuff, sizeof(ucTextBuff));	
						}
						else if(strcmp(stInputboxWidget.name, ucWidgetName)!=0){
							return EL_UI_RET_INVALID_PARAM;	
						}	
					}
					memcpy(pucResponse, stInputboxWidget.value, sizeof(ucTextBuff));
					
					ComDebugTx("SetElement INPUT stInputboxWidget.type = 0x%02x\n", stInputboxWidget.type);

					ucInputType = GetInputType(stInputboxWidget.type);
					ucPinPadTag = ucInputType;
					ComDebugTx("SetElement INPUT ucInputType = 0x%02x\n", ucInputType);
					if(stInputboxWidget.textalign == ALIGN_LEFT){
						ucInputType |= 0x04 ;
					}
					if(stInputboxWidget.textalign == ALIGN_RIGHT){
						ucInputType &= 0xFB ;
					}
					if(stInputboxWidget.fontsize != 0){
						ucInputType |= 0x40;
					}
					if(stInputboxWidget.fontsize == 0){
						ucInputType &= 0xBF;
					}
					if(stInputboxWidget.mode == 1){
						ucInputType &= 0xFE;
					}
					if(stInputboxWidget.mode == 0){
						ucInputType |= 0x01;
					}
					ScrGotoxyEx(stInputboxWidget.x, stInputboxWidget.y);
					
#ifdef UI_DEBUG_
					ComDebugTx("SetElement INPUT stInputboxWidget.mode = 0x%02x\n", ucInputType);
					ComDebugTx("SetElement INPUT stInputboxWidget.minlen = %d\n", stInputboxWidget.minlen);
					ComDebugTx("SetElement INPUT stInputboxWidget.maxlen = %d\n", stInputboxWidget.maxlen);
#endif				
					if(ucPinPadTag != PIN_PAD){
						iRet = GetString(pucResponse, ucInputType, stInputboxWidget.minlen, stInputboxWidget.maxlen);
					}
					xmlOffset += sizeof(ST_INPUTBOX_WIDGET);
					ComDebugTx("INPUTBOX xmlOffset = %d\n", xmlOffset);
					break;

					case MENUITEM:
					if(ucTag == TAG_MOBILE){
						return EL_UI_RET_INVALID_PAGE;
					}

					xmlOffset++;
					xmlOffset += sizeof(ST_MENU_WIDGET);	

					if(pucMsg != NULL){
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
						iMsgOffset  +=  iLength;
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
						iMsgOffset  += iLength;
					}							
					break;	

				default:
					XmlTag = 0;
					break;
			}
	}
	
	return 0;
}

static int GetMenuElement(const uchar *buff, const uint uiMsgLength, const uchar *pucMsg, uchar *pucKeyAccept, ST_MENU_WIDGET *pstMenuItem, int *piMenuItemNum, const uchar ucTag){
	int   iRet = 0, xmlOffset = 0, iMsgOffset = 0, iLength = 0;
	uchar ucMenuIndex = 0;
	uchar ucXLocation = 0;
	uchar ucWidgetName[WIDGETNAME_LENGTH_MAX]={0};
	uchar ucTextBuff[MSG_LENGTH_MAX]={0};
	uchar ucPicBuff[1024]={0};
	uchar ucMenuItemBuff[MENUITEM_LENGTH_MAX]={0};

	uchar XmlTag = 1;

	ST_TEXTBOX_WIDGET stTextboxWidget;
	ST_PICTURE_WIDGET stPictureWidget;
	ST_MENU_WIDGET stMenuWidget;	

	ScrCls();
	while( iMsgOffset <= uiMsgLength && XmlTag == 1){
			memset(ucWidgetName, 0, sizeof(ucWidgetName));
			memset(ucTextBuff, 0, sizeof(ucTextBuff));
			memset(ucPicBuff, 0, sizeof(ucPicBuff));
			switch(buff[xmlOffset]){
					case TEXTBOX:
					xmlOffset++;
					memcpy(&stTextboxWidget, buff +xmlOffset, sizeof(ST_TEXTBOX_WIDGET));

					strcpy(pucKeyAccept, &stTextboxWidget.keyaccept);
					
					SetCustomizedFont(stTextboxWidget.fontsize);
					ScrAttrSet(stTextboxWidget.mode);

					if(pucMsg != NULL){
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
						memcpy(ucWidgetName, pucMsg + iMsgOffset, iLength);
						iMsgOffset += iLength;
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
						memcpy(ucTextBuff,pucMsg + iMsgOffset, iLength);
						iMsgOffset += iLength;		
						if(strcmp(stTextboxWidget.name, ucWidgetName)==0 && ucTextBuff != NULL){
							memcpy(stTextboxWidget.value, ucTextBuff, sizeof(ucTextBuff));
							memset(ucTextBuff, 0, sizeof(ucTextBuff));
						}
						else if(strcmp(stTextboxWidget.name, ucWidgetName)!=0)
							return EL_UI_RET_INVALID_PARAM;
					}
					GetSubStr(ucTextBuff, stTextboxWidget.value, &stTextboxWidget.fontsize);
					ucXLocation = SetShowAlign(ucTextBuff, stTextboxWidget.textalign, stTextboxWidget.fontsize);
					if(ucXLocation == EL_UI_RET_VALUESIZEERROR){
						return EL_UI_RET_VALUESIZEERROR;
					}
					ScrTextOut(ucXLocation, stTextboxWidget.y, ucTextBuff);
					xmlOffset += sizeof(ST_TEXTBOX_WIDGET);
					break;
										
					case PICTUREBOX:
						xmlOffset ++;
						memcpy(&stPictureWidget, buff +xmlOffset, sizeof(ST_PICTURE_WIDGET));

						if(pucMsg != NULL){
							iLength = pucMsg[iMsgOffset];
							iMsgOffset++;

							memcpy(ucWidgetName, pucMsg + iMsgOffset, iLength);
							iMsgOffset +=  iLength;
							iLength = (ushort)pucMsg[iMsgOffset] | (ushort)pucMsg[iMsgOffset+1]<<8;
							iMsgOffset += sizeof(ushort);
							if(strcmp(stPictureWidget.name , ucWidgetName)==0){
								memcpy(&stPictureWidget.value, pucMsg + iMsgOffset, iLength);
							}
							else if(strcmp(stPictureWidget.name , ucWidgetName)!=0){
								return EL_UI_RET_INVALID_PARAM;
							}
							iMsgOffset += iLength;
						}		
						iRet = BmpConvert(stPictureWidget.value, ucPicBuff, sizeof(ucPicBuff));
						if(iRet == 0){
							ScrDrLogoxy(stPictureWidget.x, stPictureWidget.y, ucPicBuff);
						}
						xmlOffset += sizeof(ST_TEXTBOX_WIDGET);
						break;	
					
					case INPUTBOX:
						xmlOffset++;
						xmlOffset += sizeof(ST_INPUTBOX_WIDGET);
						if(pucMsg != NULL){
							iLength = pucMsg[iMsgOffset];
							iMsgOffset++;
							iMsgOffset +=  iLength;	
						}
						break;
						
					case MENUITEM:
					if(ucTag == TAG_MOBILE){
						return EL_UI_RET_INVALID_PAGE;
					}
					
					ucMenuIndex ++;
					*piMenuItemNum = ucMenuIndex;

					xmlOffset++;
					memcpy(&stMenuWidget, buff +xmlOffset, sizeof(ST_MENU_WIDGET));

					if(pucMsg != NULL){
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
					
						memcpy(ucWidgetName, pucMsg + iMsgOffset, iLength);

						iMsgOffset  +=  iLength;
						iLength = pucMsg[iMsgOffset];
						iMsgOffset++;
						memcpy(ucMenuItemBuff, pucMsg + iMsgOffset, iLength);
						iMsgOffset  += iLength;
						if(strcmp(stMenuWidget.name, ucWidgetName) == 0 && ucMenuItemBuff != NULL){
							memcpy(stMenuWidget.value, ucMenuItemBuff, sizeof(ucMenuItemBuff));
							memset(ucMenuItemBuff, 0, sizeof(ucMenuItemBuff));
						}
						else{
							return EL_UI_RET_INVALID_PARAM;
						}
					}
#ifdef UI_DEBUG_					
					ComDebugTx("SetMenuElement stMenuWidget.name = %s \n", stMenuWidget.name);
					ComDebugTx("SetMenuElement stMenuWidget.value = %s \n", stMenuWidget.value);
					ComDebugTx("SetMenuElement *piMenuItemNum = %d \n", *piMenuItemNum);
					ComDebugTx("SetMenuElement ucMenuIndex = %d \n", ucMenuIndex);
#endif				
					GetSubStr(ucMenuItemBuff, stMenuWidget.value, &stMenuWidget.fontsize);
					memcpy(pstMenuItem[ucMenuIndex-1].name, stMenuWidget.name, sizeof(stMenuWidget.name));
					memcpy(pstMenuItem[ucMenuIndex-1].value, ucMenuItemBuff, MENUITEM_LENGTH_MAX);
					pstMenuItem[ucMenuIndex-1].textalign = stMenuWidget.textalign;
					pstMenuItem[ucMenuIndex-1].fontsize = stMenuWidget.fontsize;
					pstMenuItem[ucMenuIndex-1].x = stMenuWidget.x;
					pstMenuItem[ucMenuIndex-1].y = stMenuWidget.y;
					
					xmlOffset += sizeof(ST_MENU_WIDGET);
					break;	

				default:
					XmlTag = 0;
					break;
			}
	}
	return 0;
	
}


int EShowMsgBox(const uchar *pucPageName, const uint uiMsgLength, const uchar  *pucMsg, const ushort usTimeout, const uchar ucTag)
{
	int   iRet = 0;
	uchar ucKeyAccept = BUTTON_NONE, ucKeyValue = 0;
	uchar buff[1024]={0};

	if(pucPageName == NULL || strlen(pucPageName) == 0)	// Added by ZhangYuan 2016-11-17, return error, if page name is null
	{
		return EL_UI_RET_INVALID_PAGE;
	}

#ifdef UI_DEBUG_
	ComDebugTx("[EShowMsgBox] pucPageName=%s, pucMsg = %s\n", pucPageName, pucMsg==NULL ? "pucMsg == NULL" : pucMsg);	// Modified by ZhangYuan 2016-11-17
#endif

	iRet = ParseUi(pucPageName,buff,sizeof(buff));
#ifdef UI_DEBUG_
	ComDebugTx("EShowMsgBox ParseUi  pucPageName = %s\n", pucPageName);
	ComDebugTx("EShowMsgBox ParseUi  iRet = %d\n", iRet);
#endif
	if(iRet != 0){
#ifdef UI_DEBUG_
		ComDebugTx("EShowMsgBox ParseUi  iRet = %d\n", iRet);
#endif
		return EL_UI_RET_PARSEUI_FAILED;
	}

	if(usTimeout != 0 ){
		TimerSet(UI_TIMER,usTimeout);
	}
#ifdef UI_DEBUG_
	AppHexLog("EShowMsgBox XML buff = ", buff, sizeof(buff));
#endif	
	iRet = SetElement(buff, uiMsgLength, pucMsg, &ucKeyAccept, NULL, ucTag);
#ifdef UI_DEBUG_
	AppLog("EShowMsgBox SetElement = %d\n", iRet);
#endif
	if(iRet != 0){
		return iRet;
	}
#ifdef UI_DEBUG_
	AppLog("EShowMsgBox ucKeyAccept = %d\n", ucKeyAccept);
#endif
	while(TimerCheck(UI_TIMER)){
		switch(ucKeyAccept){
			case BUTTON_NONE:
				break;
			case BUTTON_CANCEL:
				if(!kbhit()){
					ucKeyValue = getkey();
				}
				if(ucKeyValue == KEYCANCEL){
					ScrCls();
					ScrTextOut(0, 0, "user canceled!");
					return RET_OK;
				}
				break;
			case BUTTON_ENTER:
				if(!kbhit()){
					ucKeyValue = getkey();
				}
				if(ucKeyValue == KEYENTER){
					ScrCls();
					ScrTextOut(0, 0, "user confirmed!");
					return RET_OK;
				}
				break;
			case BUTTON_ENTER_CANCEL:
				if(!kbhit()){
					ucKeyValue = getkey();
				}
				if(ucKeyValue == KEYCANCEL){
					ScrCls();
					ScrTextOut(0, 0, "user canceled!");
					return RET_OK;
				}
				if(ucKeyValue == KEYENTER){
					ScrCls();
					ScrTextOut(0, 0, "user confirmed!");
					return RET_OK;
				}
				break;
			default:
				break;		
		}
		if(ucKeyAccept == BUTTON_NONE) 
			break;
	}
	if(!TimerCheck(UI_TIMER)){
		ScrCls();
		ScrTextOut(0, 0, "timeout exit!");
		return EL_UI_RET_TIME_OUT;
	}
	else{
		ScrCls();
		ScrTextOut(0, 0, "return successed");
		return RET_OK;
	}
}

int EShowInputBox(const uchar *pucPageName,const uint uiMsgLength, const uchar  *pucMsg, uchar *pucResponse, const ushort usTimeout, const uchar ucTag)
{
	int   iRet = 0; 
	uchar  ucKeyAccept = BUTTON_NONE, ucKeyValue = 0;
	
	uchar buff[1024]={0};

	if(pucMsg == NULL){
#ifdef UI_DEBUG_
		ComDebugTx("pucMsg == NULL\n");
#endif
	}
	
	iRet = ParseUi(pucPageName,buff,sizeof(buff));
	if(iRet != 0){
#ifdef UI_DEBUG_
		ComDebugTx("EShowInputBox ParseUi  iRet = %d\n", iRet);
#endif
		return EL_UI_RET_PARSEUI_FAILED;
	}

	if(usTimeout != 0 ){
		TimerSet(UI_TIMER,usTimeout*10);
	}

	iRet = SetElement(buff, uiMsgLength, pucMsg, &ucKeyAccept, pucResponse, ucTag);
	if(iRet != 0){
		return iRet;
	}
	ComDebugTx("EShowInputBox SetElement  pucResponse = %d, %s\n", pucResponse[0], &pucResponse[1]);
	while(TimerCheck(UI_TIMER)){
		switch(ucKeyAccept){
			case BUTTON_NONE:
				break;
			case BUTTON_CANCEL:
				if(!kbhit()){
					ucKeyValue = getkey();
				}
				if(ucKeyValue == KEYCANCEL){
					ScrCls();
					ScrTextOut(0, 0, "user canceled!");
					return RET_OK;
				}
				break;
			case BUTTON_ENTER:
				if(!kbhit()){
					ucKeyValue = getkey();
				}
				if(ucKeyValue == KEYENTER){
					ScrCls();
					ScrTextOut(0, 0, "user confirmed!");
					return RET_OK;
				}
				break;
			case BUTTON_ENTER_CANCEL:
				if(!kbhit()){
					ucKeyValue = getkey();
				}
				if(ucKeyValue == KEYENTER || ucKeyValue == KEYENTER ){
					ScrCls();
					ScrTextOut(0, 0, "exit successed!");
					return RET_OK;
				}
				break;
			default:
				break;		
		}
		if(ucKeyAccept == BUTTON_NONE) 
			break;
	}
	if(!TimerCheck(UI_TIMER)){
		ScrCls();
		ScrTextOut(0, 0, "timeout exit!");
		return EL_UI_RET_TIME_OUT;
	}
	else{
		ScrCls();
		ScrTextOut(0, 0, "return successed");
		return RET_OK;
	}
}

int EShowMenuList(const uchar *pucPageName,const uint uiMsgLength, const uchar  *pucMsg, uchar *pucResponse, const ushort usTimeout, const uchar ucTag)
{
	int  iRet = 0;
	uchar ucKeyAccept = BUTTON_NONE, ucKeyValue = 0;
	uchar buff[1024]={0};
	ST_MENU_WIDGET stMenuItem[32];
	int iMenuItemNum = 0;
	int iSelected = 0;

	if(pucMsg == NULL){
#ifdef UI_DEBUG_
		ComDebugTx("EShowMenuList pucMsg == NULL\n");
#endif
	}
		
	iRet = ParseUi(pucPageName, buff, sizeof(buff));
	if(iRet != 0){
#ifdef UI_DEBUG_
		ComDebugTx("EShowMenuList ParseUi  iRet = %d\n", iRet);
#endif
		return EL_UI_RET_PARSEUI_FAILED;
	}

	if(usTimeout != 0 ){
		TimerSet(UI_TIMER,usTimeout);
	}

	memset(&stMenuItem, 0 , 32 * sizeof(ST_MENU_WIDGET));
	iRet = GetMenuElement(buff, uiMsgLength, pucMsg, &ucKeyAccept ,stMenuItem, &iMenuItemNum, ucTag);
#ifdef UI_DEBUG_
	ComDebugTx("EShowMenuList SetMenuElement stMenuItem[0].name = %s\n", stMenuItem[0].name);
	ComDebugTx("EShowMenuList SetMenuElement stMenuItem[1].name = %s\n", stMenuItem[1].name);
	ComDebugTx("EShowMenuList SetMenuElement stMenuItem[2].name = %s\n", stMenuItem[2].name);

	ComDebugTx("EShowMenuList SetMenuElement stMenuItem[0].value = %s\n", stMenuItem[0].value);
	ComDebugTx("EShowMenuList SetMenuElement stMenuItem[1].value = %s\n", stMenuItem[1].value);
	ComDebugTx("EShowMenuList SetMenuElement stMenuItem[2].value = %s\n", stMenuItem[2].value);
#endif
#ifdef UI_DEBUG_
	ComDebugTx("EShowMenuList SetMenuElement iMenuItemNum = %d\n", iMenuItemNum);
#endif
	if(iRet != 0){
#ifdef UI_DEBUG_
		ComDebugTx("EShowMenuList SetMenuElement  iRet = %d\n", iRet);
#endif
		return iRet;
	}

	iSelected = MenuProcess(MIN(32, iMenuItemNum), stMenuItem, 60);
	memcpy(pucResponse, &iSelected, sizeof(uchar));
#ifdef UI_DEBUG_
	ComDebugTx("EShowMenuList MenuProcess  pucResponse = %d\n", *pucResponse);
	ComDebugTx("EShowMenuList MenuProcess  iSelected = %d\n", iSelected);
#endif

	while(TimerCheck(UI_TIMER)){
		switch(ucKeyAccept){
			case BUTTON_NONE:
				break;
			case BUTTON_CANCEL:
				if(!kbhit()){
					ucKeyValue = getkey();
				}
				if(ucKeyValue == KEYCANCEL){
					ScrCls();
					ScrTextOut(0, 0, "user canceled!");
					return RET_OK;
				}
				break;
			case BUTTON_ENTER:
				if(!kbhit()){
					ucKeyValue = getkey();
				}
				if(ucKeyValue == KEYENTER){
					ScrCls();
					ScrTextOut(0, 0, "user confirmed!");
					return RET_OK;
				}
				break;
			case BUTTON_ENTER_CANCEL:
				if(!kbhit()){
					ucKeyValue = getkey();
				}
				if(ucKeyValue == KEYENTER || ucKeyValue == KEYENTER ){
					ScrCls();
					ScrTextOut(0, 0, "exit successed!");
					return RET_OK;
				}
				break;
			default:
				break;		
		}
		if(ucKeyAccept == BUTTON_NONE) 
			break;
	}
	if(!TimerCheck(UI_TIMER)){
		ScrCls();
		ScrTextOut(0, 0, "timeout exit!");
		return EL_UI_RET_TIME_OUT;
	}
	else{
		ScrCls();
		ScrTextOut(0, 0, "return successed");
		return RET_OK;
	}
}

int ShowMsgBox(const uchar * pucRequest)
{
	int iRet = 0;
	uint uiReqOffset = 0;
	uint uiLength = 0;
	uchar ucPageName[PAGENAME_LENGTH_MAX]={0};
	uchar ucMsgBuff[1024]={0};
	ushort usTimeout = 0;
	uint uiDataLength = 0;
	uchar ucTag = TAG_MOBILE;

	uchar ucRespond[32] = {0};//just for test EShowMenuList and EShowInputBox
	memset(ucPageName, 0, sizeof(ucPageName));
	memset(ucMsgBuff,  0, sizeof(ucMsgBuff));

	uiDataLength = (uint)pucRequest[uiReqOffset]<<24 | (uint)pucRequest[uiReqOffset+1]<<16 | (uint)pucRequest[uiReqOffset+2]<<8 |(uint)pucRequest[uiReqOffset+3];
	uiReqOffset += sizeof(uint);

	uiLength = pucRequest[uiReqOffset];
	uiReqOffset++;

	memcpy(ucPageName, pucRequest+ uiReqOffset, uiLength);
	uiReqOffset +=  uiLength;

	usTimeout =  (ushort)pucRequest[uiReqOffset] << 8 | (ushort)pucRequest[uiReqOffset + 1];
	uiReqOffset +=  sizeof(ushort);
	

	uiLength = uiDataLength - pucRequest[4] -1-sizeof(ushort);
	memcpy(ucMsgBuff, pucRequest+ uiReqOffset, uiLength);
#ifdef UI_DEBUG_	
	AppLog("ShowMsgBox uiDataLength= %d\n", uiDataLength);
	AppLog("ShowMsgBox ucPageName Length= %d\n", uiLength);	
	AppLog("ShowMsgBox ucPageName=%s\n", ucPageName);		
	AppLog("ShowMsgBox usTimeout=%d\n", usTimeout);
	AppLog("ShowMsgBox ucMsgBuff=%s\n", ucMsgBuff);
	AppHexLog("ShowMsgBox ucMsgBuff =", ucMsgBuff,uiLength);
	AppLog("ShowMsgBox uiLength=%d\n", uiLength);
#endif
	if(ucMsgBuff[uiReqOffset] != 0x00){
//		iRet = EShowMsgBox(ucPageName, uiLength, ucMsgBuff ,usTimeout, ucTag);
		iRet = EShowMenuList(ucPageName, uiLength,  ucMsgBuff, ucRespond ,usTimeout, TAG_POS);//for test menulist
//		iRet = EShowInputBox(ucPageName, uiLength, ucMsgBuff ,ucRespond, usTimeout, TAG_POS);//for test inputbox
	}
	else{
//		iRet = EShowMsgBox(ucPageName, 0, NULL ,usTimeout, ucTag);
		iRet = EShowMenuList(ucPageName, 0, NULL ,ucRespond, usTimeout, TAG_POS);//for test menulist
//		iRet = EShowInputBox(ucPageName, 0, NULL ,ucRespond, usTimeout, TAG_POS);//for test inputbox
	}

	if(iRet != 0){
		return iRet;
	}
	
	return 0;
}
