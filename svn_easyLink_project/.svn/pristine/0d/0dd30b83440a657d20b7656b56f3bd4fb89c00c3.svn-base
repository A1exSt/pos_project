/*
 * ============================================================================
 * COPYRIGHT
 *              Pax CORPORATION PROPRIETARY INFORMATION
 *   This software is supplied under the terms of a license agreement or
 *   nondisclosure agreement with Pax Corporation and may not be copied
 *   or disclosed except in accordance with the terms in that agreement.
 *      Copyright (C) 2016 Pax Corporation. All rights reserved.
 * Module Date:2016/08/09     
 * Module Auth:huangwp     
 * Description:communication module
 *      
 * ============================================================================
 */


#include "..\inc\global.h"

uchar RecvBuf[BUF_LEN_2048] = {0};
uchar ResponseBuf[BUF_LEN_2048 + ERR_MSG_OFFSET] = {0};

static ushort usFileDownLoadCommand[] = 
{
	EL_CMD_REMOTEDOWNLOAD_TASKINFO,
	EL_CMD_REMOTEDOWNLOAD_SAVEDATA,
	EL_CMD_REMOTEDOWNLOAD_TASKASK,	
	EL_CMD_GET_TERM_SN,
	EL_CMD_GET_TERM_EXTSN,
	EL_CMD_GET_TERM_VER_INFO,
	EL_CMD_GET_TERM_INFO,
};

static uchar *RetToString(int ReturnCode)
{
	switch(ReturnCode)
	{
		case EL_COMM_RET_CONNECTED:
			return "COMM:Connected";
		case EL_COMM_RET_DISCONNECT_FAIL:
			return "COMM:DisConnectFail";
		case EL_COMM_RET_NOTCONNECTED:
			return "COMM:NotConnect";
		default:
			return "COMM:Unkonw";
	}
}


// Please make sure message is shorter than 16 characters
void showMessage(char *message)
{
	int x;

	x = (128 - (strlen(message) * 6)) / 2;
	ScrTextOut(x, 16, message);
}


void InitUsbCom(void)
{
    uchar ucRet;

	showMessage("Init USB...");

	ucRet = PortClose(COM_USB);
	ucRet = iMsgInit(g_ucCommPort, 9999, 900);

	if(ucRet!= 0x00){
		Lcdprintf("PortOpen:%02x", ucRet);
		getkey();
	}
	g_UsbOpenFlag = 1;
	DelayMs(500);
	ScrCls();
}

uchar ComDebugTx(char *psStr, ...)
{   
	uchar ucRet=0;
#ifdef APP_DEBUG
    va_list ap;  
    char buffer[BUF_LEN_2048];
	int i = 0;
	
	//TimerSet(13, (short)(1));
    //while(TimerCheck(13)!=0);
    DelayMs(10);
    memset(buffer, 0, sizeof(buffer));
	
    if(0 == g_UsbOpenFlag)
    {
        ucRet = PortOpen(COM_USB, "115200,8,n,1");
		g_UsbOpenFlag = 1;
    }
    
    va_start(ap, psStr);       
    vsnprintf(buffer, BUF_LEN_2048, psStr, ap);  
    va_end(ap);  

    if(strlen(buffer) < 999)
    {
    	ucRet = PortSends(COM_USB, buffer, strlen(buffer)+1);
    }
	else
	{
		for(i = 0; i < strlen(buffer)/999; i ++)
		{
		    ucRet = PortSends(COM_USB, buffer, strlen(buffer +999*i)+1);
			DelayMs(500);
		}
	}
 
#endif
    return ucRet;
}

ushort GetCommand(const uchar *pucMsgDataBuf)
{
    ushort iCommand = -1;
	
	iCommand = (pucMsgDataBuf[0] << 8) + pucMsgDataBuf[1];
	#ifdef COMM_DEBUG
	ComDebugTx("GetCommand pucMsgDataBuf[0] = %X\n", pucMsgDataBuf[0]);
	ComDebugTx("GetCommand pucMsgDataBuf[1] = %X\n", pucMsgDataBuf[1]);

	ComDebugTx("GetCommand type = %X\n", iCommand);
	#endif

	return iCommand;
}


int HandleRequest(const uchar *pucMsgDataBuf, uchar *pucMsgResponse, int *piResponseLen, ushort usCommand, uchar *ucSendResFlag)
{
	//uchar *pucData = NULL;
	int ReturnCode = 0;
	int i = 0;
	
	//ComDebugTx("HandleRequest iCommand = %d\n", usCommand);

	switch(usCommand)
	{
		case EL_CMD_CONNECT:
			ReturnCode = Connect();
			//ComDebugTx("HandleRequest command is COMMAND_CONNECT\n");
#ifdef COMM_DEBUG

			AppHexLog("[HandleRequest] Value: ", pucMsgDataBuf, 27);
#endif
			break;

		case EL_CMD_DISCONNECT:
			ReturnCode = DisConnect(EL_LOGGIC_CONNECT);
			#ifdef COMM_DEBUG
			ComDebugTx("HandleRequest command is COMMAND_DISCONNECT\n");
			#endif
			break;

		case EL_CMD_SHOW_MSG_BOX:
			#ifdef COMM_DEBUG
			ComDebugTx("HandleRequest command is COMMAND_SHOW_MSG_BOX\n");
			#endif
			ReturnCode = ShowMsgBox(pucMsgDataBuf);
			break;

		case EL_CMD_PED_GET_PIN_BLOCK:
			ReturnCode = GetPinBlock((char *)pucMsgDataBuf, (char *)pucMsgResponse, (unsigned int *)piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] GetPinBlock=%d\n", ReturnCode);
			AppHexLog("[HandleRequest] pucMsgResponse: ", pucMsgResponse, *piResponseLen);
#endif
			break;

		case EL_CMD_PED_ENCRY_DATA:
			ReturnCode = EncryptData((char *)pucMsgDataBuf, (char *)pucMsgResponse, (unsigned int *)piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] EncryptData=%d\n", ReturnCode);
			AppHexLog("[HandleRequest] pucMsgResponse: ", pucMsgResponse, *piResponseLen);
#endif
			break;

		case EL_CMD_START_TRANSACTION:
			ReturnCode = StartTransaction();
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] StartTransaction=%d\n", ReturnCode);
#endif
			break;

		case EL_CMD_COMPLETE_TRANSACTION:
			ReturnCode = CompleteTransaction();
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] CompleteTransaction=%d\n", ReturnCode);
#endif
			break;

		case EL_CMD_SET_DATA:
			ReturnCode = SetData(pucMsgDataBuf, pucMsgResponse, (unsigned int *)piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] SetData=%d\n", ReturnCode);
			AppHexLog("[HandleRequest] pucMsgResponse: ", pucMsgResponse, *piResponseLen);
#endif
			break;

		case EL_CMD_GET_DATA:
			ReturnCode = GetData(pucMsgDataBuf, pucMsgResponse, (unsigned int *)piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] GetData=%d\n", ReturnCode);
			AppHexLog("[HandleRequest] pucMsgResponse: ", pucMsgResponse, *piResponseLen);
#endif
			break;

		case EL_CMD_FILE_DOWNLOAD:
#ifdef COMM_DEBUG
			ComDebugTx("HandleRequest command is COMMAND_FILE_DOWNLOAD\n");
#endif
			ReturnCode = DownloadFile(pucMsgDataBuf);
			if(ReturnCode != 0)	// Added by ZhangYuan 2016-10-27	
			{
				g_IdeUi = 0x00;	
				ScrCls();
			}
			break;

		case EL_CMD_SET_COMPATIBLE_MODE:
			ReturnCode = SetCompatiblaMode(pucMsgDataBuf);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] SetCompatiblaMode=%d\n", ReturnCode);
#endif
			break;

		case EL_CMD_REMOTEDOWNLOAD_TASKINFO:
			ReturnCode = RemoteDownload_TaskInfo(pucMsgDataBuf, pucMsgResponse, piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] RemoteDownload_TaskInfo=%d\n", ReturnCode);
#endif
			break;

		case EL_CMD_REMOTEDOWNLOAD_SAVEDATA:
			ReturnCode = RemoteDownload_SaveData(pucMsgDataBuf, pucMsgResponse, piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] RemoteDownload_SaveData=%d\n", ReturnCode);
#endif
			if(ReturnCode != 0)
			{
				ScrCls();
				g_IdeUi = 0x00;
			}
			break;

		case EL_CMD_REMOTEDOWNLOAD_TASKASK:
			ReturnCode = RemoteDownload_TaskAsk(pucMsgDataBuf, pucMsgResponse, piResponseLen, ucSendResFlag);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] RemoteDownload_TaskAsk=%d\n", ReturnCode);
#endif
			break;

		case EL_CMD_GET_TERM_SN:
			ReturnCode = GetTermSN(pucMsgResponse, piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] GetTermSN=%d\n", ReturnCode);
			AppHexLog("[HandleRequest] pucMsgResponse: ", pucMsgResponse, *piResponseLen);
#endif
			break;

		case EL_CMD_GET_TERM_EXTSN:
			ReturnCode = GetTermExtSN(pucMsgResponse, piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] GetTermExtSN=%d\n", ReturnCode);
			AppHexLog("[HandleRequest] pucMsgResponse: ", pucMsgResponse, *piResponseLen);
#endif
			break;
		case EL_CMD_GET_TERM_VER_INFO:
			ReturnCode = GetTermVerInfo(pucMsgResponse, piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] GetTermVerInfo=%d\n", ReturnCode);
			AppHexLog("[HandleRequest] pucMsgResponse: ", pucMsgResponse, *piResponseLen);
#endif
			break;

		case EL_CMD_GET_TERM_INFO:
			ReturnCode = GetTerminalInfo(pucMsgResponse, piResponseLen);
#ifdef COMM_DEBUG_
			AppLog("[HandleRequest] GetTerminalInfo=%d\n", ReturnCode);
			AppHexLog("[HandleRequest] pucMsgResponse: ", pucMsgResponse, *piResponseLen);
#endif
			break;

		default:
			return EL_CMD_NONE;

	}
	//send response
	return ReturnCode;
}

//added by Kevinliu 20161024
#define SYS_SLEEP_TIMER_NO		1
static void SleepCounterCreate(void)
{
	unsigned long ulTmp=0;
	
	PubBcd2Long(g_tAppParam.ucSleepModeTimeout, 2, &ulTmp);
	//100ms / number
	TimerSet(SYS_SLEEP_TIMER_NO, ulTmp);
}
static void SleepCounterReset(void)
{
	unsigned long ulTmp=0;

	PubBcd2Long(g_tAppParam.ucSleepModeTimeout, 2, &ulTmp);
	//100ms / number
	TimerSet(SYS_SLEEP_TIMER_NO,  ulTmp);
}
static void SleepCounterCheck(void)
{
	uchar ucDownCtrl[5]={0};
	unsigned long ulTmp=0;

	if ( TimerCheck(SYS_SLEEP_TIMER_NO) <= 0 ) {
		PubBcd2Long(g_tAppParam.ucSleepModeTimeout, 2, &ulTmp);
		//if ucSleepModeTimeout = 0, no sleep.
		if ( ulTmp != 0 ) {
			ucDownCtrl[0]='1';
			ucDownCtrl[1]='1';
			ucDownCtrl[2]=0x00;  //for RTC wake up
		//	ucDownCtrl[3]='0';	 //Display The final interface after sleep
			ucDownCtrl[3] = NULL;	// Clear interface after sleep
			SysSleep(ucDownCtrl);
		}
		TimerSet(SYS_SLEEP_TIMER_NO,  ulTmp);
	}
}

int Processor(void)
{
	int iRet = -1;
	int ResponsLen = 0;
	ushort iCommand = 0;
//	uchar RecvBuf[BUF_LEN_2048] = {0};
//	uchar ResponseBuf[BUF_LEN_2042] = {0};
	int iReturnCode = -1;
	uchar SendResponseFlag = 0;
	uchar ucKey = 0;
	unsigned long ulTmp=0;

	SleepCounterCreate();	//added by kevinliu 10161024
	while(1)
	{   
		SleepCounterCheck();	//added by kevinliu 10161024
		if(!g_IdeUi)
		{
			CommDispString("Welcome!",2|DISP_LINE_CENTER);
		}
	
		if(0 == kbhit() )
		{
			SleepCounterReset();		//added by kevinliu 10161024
			if(getkey() == KEYENTER)
			{
				ucKey = PubWaitKey(1);
				if(ucKey == KEYCANCEL)
				{
					//return 0;
					uchar ucCommPort=g_ucCommPort;
					
					MainMenu();
					if(ucCommPort != g_ucCommPort)
					{
						InitComm();
					}
				}	
			}
		}
		
		iRet = CheckPhysicConnectStatus(g_ucCommPort);
		if(iRet == EL_CMD_PHYSICAL_DISCONNECTED || iRet == -1)
		{
			  #ifdef COMM_DEBUG
//		      ComDebugTx("Processor EL_COMM_PHYSICAL_DISCONNECTED iRet = %d\n", iRet);
			  #endif
			  g_ConnectFlag = 0;
		      continue;
		}
	    memset(RecvBuf,0,sizeof(RecvBuf));
		
		iRet = iReceiveRequest(sizeof(RecvBuf), RecvBuf, &iCommand, 1000);
		if(iRet < 0)
		{
		   	continue;
		}
		SleepCounterReset();		//added by kevinliu 10161024

		#ifdef COMM_DEBUG
		ComDebugTx("Processor receive iRet = %d\n", iRet);
		#endif
		
		
		if(!g_ConnectFlag)
		{
			#ifdef COMM_DEBUG
		    ComDebugTx("Processor have not connect\n");
			#endif
			if(iCommand != EL_CMD_CONNECT)
			{    
			     iReturnCode = EL_COMM_RET_NOTCONNECTED;
				 #ifdef COMM_DEBUG
				 ComDebugTx("Processor have not connect sendResponse\n");
				 #endif
				 memset(ResponseBuf,0,sizeof(ResponseBuf));
				 ResponsLen = 0;
				 ComPoseErrMsg(RetToString, iReturnCode, 0, __LINE__);
				 memcpy(ResponseBuf, g_pucErrMsg, ERR_MSG_OFFSET);
				 iSendResponse(ResponseBuf, ResponsLen + ERR_MSG_OFFSET, iReturnCode, iCommand);
			     continue;
			}
		}

		memset(ResponseBuf,0,sizeof(ResponseBuf));
		ResponsLen = 0;
		iReturnCode = HandleRequest(RecvBuf, ResponseBuf + ERR_MSG_OFFSET, &ResponsLen, iCommand, &SendResponseFlag);
		#ifdef COMM_DEBUG
		ComDebugTx("Processor receive iCommand = %d\n", iCommand);
		ComDebugTx("Processor receive iReturnCode = %d\n", iReturnCode);
		#endif
		if(EL_CMD_NONE == iReturnCode)
		{
		     ComDebugTx("Processor command error\n");
		}
		if(!SendResponseFlag)
		{
			iSendResponse(ResponseBuf, ResponsLen + ERR_MSG_OFFSET, iReturnCode, iCommand);
			SleepCounterReset();		//added by kevinliu 10161024
		}
		else
		{
			SendResponseFlag = 0;
		}
		if(iCommand == EL_CMD_DISCONNECT)
		{
			iRet = DisConnect(EL_PHYSIC_CONNECT);
			if(iRet < 0)
			{
				return iRet;
			}
		}
		
		// Added by zhangyuan 2016-09-27 reboot after download the app/monitor/font ========
		if(g_ucRebootFlag == 0x01)
		{
			Beep();
			Reboot();
		}
		// Added end =======================================================================
	}

    return 0;
}


int Connect(void)
{
    if(!g_ConnectFlag)
    {
        g_ConnectFlag = 1;
		return EL_COMM_RET_CONNECT_SUCCESS;
    }
	else
	{
	   ComPoseErrMsg(RetToString, EL_COMM_RET_CONNECTED, 0, __LINE__);
	   return EL_COMM_RET_CONNECTED; 
	}
}

int DisConnect(int iConnectType)
{
     int iRet = -1;
	 if(iConnectType == EL_LOGGIC_CONNECT)
	 {
	 	g_ConnectFlag = 0;
		iRet = 0;
	 }
	 else
	 {
		 switch(g_ucCommPort)
		 {
		     case COM_BLUETOOTH:
			 	iRet = BtIoCtrl(eBtCmdDropLink, 0, 0, 0, 0);
				if(iRet < 0)
		 		{
				     return EL_COMM_RET_DISCONNECT_FAIL;
		 		}
				DelayMs(500);
				iRet = BtIoCtrl(eBtCmdReset, 0, 0, 0, 0);
			    if(iRet < 0)
			    {
		    	 	return EL_COMM_RET_DISCONNECT_FAIL;
		 		}
				break;
				
		     case COM_USB:
			 	iRet = PortReset(COM_USB);
				break;
			 default:
			 	 break;
		 }
	 }
	 if(iRet < 0)
	 {
	     return EL_COMM_RET_DISCONNECT_FAIL;
	 } 	 
	 return EL_COMM_RET_CONNECT_SUCCESS;
}


int CheckPhysicConnectStatus(uchar iPort)
{
    int iRet = -1;
	
    switch(iPort)
	{
	    case COM_BLUETOOTH:
		{
			iRet = BtIoCtrl(T_eBtCmdGetLinkStatus, NULL, 0, NULL, 0);
			if (1 == iRet)
			{
				return EL_CMD_PHYSICAL_CONNECTED;
			}
			
			iRet=BtIoCtrl(T_eBtCmdGetPasskeyPairRequest, NULL, 0, NULL, 0);
			
			if(iRet == 1)
			{
				iRet = BtPairKey();
				ScrCls();
				return iRet;
			}
			return EL_CMD_PHYSICAL_DISCONNECTED;
	    }
		case COM_USB:
		{
			iRet = PortTxPoolCheck(COM_USB);
			if(0x03 == iRet)
			{
				return EL_CMD_PHYSICAL_DISCONNECTED;
			}
			return 0;
		}
		default:
			return -1;
	}
}


int isFindFileDownLoadCmd(ushort usCommand)
{
	int index = 0;

	int Len = 0;
	Len = sizeof(usFileDownLoadCommand);
	/*ComDebugTx("isFindFileDownLoadCmd usCommand = %X\n", usCommand);
    ComDebugTx("isFindFileDownLoadCmd Len = %d\n", Len);*/
	for(index = 0; index < Len/2; index++)
	{
	    //ComDebugTx("isFindFileDownLoadCmd find command is usFileDownLoadCommand[%d] = %X\n", index, usFileDownLoadCommand[index]);
	    if(usCommand == usFileDownLoadCommand[index])
	    {
	        //ComDebugTx("isFindFileDownLoadCmd find command is usFileDownLoadCommand[%d] = %X\n", index, usFileDownLoadCommand[index]);
	        return PROTOCOL_REMOTEDOWNLOAD_COMMAND;
	    }
	}

	return -1;
}

int SetCompatiblaMode(const uchar *pucMsgDataBuf)
{
     //ProtocolType = PROTOCOL_COMPATIBLE_MODE;
	 ComDebugTx("SetCompatiblaMode  = %X \n", pucMsgDataBuf);
	 if(!pucMsgDataBuf[0])
	 {
	     //ProtocolType = PROTOCOL_NORMAL_MODE;
	 }
	 else
	 {
	     //ProtocolType = PROTOCOL_COMPATIBLE_MODE;
	 }
	 return EL_RET_OK;
}

int ReadCommParam()
{
	int iFd = 0;
	int iRet = 0;
	int iWriteLen = 0;
	int iReadLen = 0;
	
	if(PdkFile_Exist (COMM_TYPE_FILE) != PDK_RET_OK)
	{
		#ifdef COMM_DEBUG
		ComDebugTx("[ReadCommParam] file comm_type not exist\n");
		#endif
		g_ucCommPort = COM_BLUETOOTH;
		iFd = PdkFile_Open (COMM_TYPE_FILE);
		if(iFd < 0)
		{
			#ifdef COMM_DEBUG
			ComDebugTx("ReadCommParam file Not Exsit PdkFile_Open = %d\n", iFd);
			#endif
			return iFd;
		}
		iWriteLen = PdkFile_Write (iFd, &g_ucCommPort, 1);
		if(iWriteLen < 0)
		{
			#ifdef COMM_DEBUG
			ComDebugTx("ReadCommParam PdkFile_Write = %d\n", iWriteLen);
			#endif
			PdkFile_Close(iFd);
			return iWriteLen;
		}
		PdkFile_Close(iFd);
	}
	else
	{
		iFd = PdkFile_Open (COMM_TYPE_FILE);
		if(iFd < 0)
		{
			#ifdef COMM_DEBUG
			ComDebugTx("ReadCommParam file exist PdkFile_Open = %d\n", iFd);
			#endif
			return iFd;
		}
		iReadLen = PdkFile_Read (iFd, &g_ucCommPort, 1);
		if(iFd < 0)
		{
			#ifdef COMM_DEBUG
			ComDebugTx("ReadCommParam PdkFile_Read = %d\n", iFd);
			#endif
			PdkFile_Close(iFd);
			return iFd;
		}
		#ifdef COMM_DEBUG
		ComDebugTx("ReadCommParam g_ucCommPort = %d\n", g_ucCommPort);
		#endif
		PdkFile_Close(iFd);
	}
	return 0;
	
}

static int SaveCommParam()
{
	int iFd = 0;
	int iWriteLen = 0;
	uchar ucWriteBuf[10] = {0};

	#ifdef COMM_DEBUG
	ComDebugTx("SaveCommParam g_ucCommPort = %d\n", g_ucCommPort);
	#endif
	memcpy(ucWriteBuf, &g_ucCommPort, 1);

	iFd = PdkFile_Open (COMM_TYPE_FILE);
	if(iFd < 0)
	{
		ComDebugTx("SaveCommParam PdkFile_Open = %d\n", iFd);
		return iFd;
	}
	
	iWriteLen = PdkFile_Write (iFd, ucWriteBuf, 1);
	if(iWriteLen < 0)
	{
		ComDebugTx("ReadCommParam PdkFile_Write = %d\n", iWriteLen);
		PdkFile_Close(iFd);
		return iWriteLen;
	}
	PdkFile_Close(iFd);
	return 0;
}

static int DispInfo(short iTimeout)
{
	uchar	szBuff[32], szVersion[8 + 1];
	char pDispStr[DISP_MAX_LEN+1]="Firmware Ver:";

	int iRet = 0;

	ST_DATA stData[3] = {
		//{"Tittle","TERMINFO"},
    	{"Version",NULL},
   	 	{"Date", NULL},  
    	{"Firm Version", NULL}, 
	};

	//App Info
	sprintf((char*)stData[0].ucWidgetValue,"%s V%s",AppInfo.AppName,AppInfo.AppVer);

	//complie date
	memset(szBuff, 0, sizeof(szBuff));
	PubBcd2Asc((uchar *)AppInfo.DownloadTime,4, szBuff);
	sprintf((char*)stData[1].ucWidgetValue,"%s%s","Date:",szBuff);

	//Firmware version Info
	memset(szVersion, 0, sizeof(szVersion));
	ReadVerInfo(szVersion);
	sprintf((char*)stData[2].ucWidgetValue, "%s%u.%02u", pDispStr, szVersion[1], szVersion[2]);
	
	iRet = EShowMsgBox(EL_COMM_TERM_INFO_PAGE,	stData , WIDGET_NUM_MAX, iTimeout, TAG_POS);
	if(iRet != 0)
	{
		ComDebugTx("Comm DispInfo EShowMsgBox iRet = %d\n", iRet);
		return iRet;
	}
	//ComDebugTx("Comm DispInfo EShowMenuList EShowMsgBox = %d\n", iRet);

}
// added end

int CommTypeSelect()
{
	int iRet = 0;
	int iSelected = 0;

	ST_DATA stData[2] = {
	//{"SetComm","SetCommType"},
    {"1-USB",NULL},
    {"2-BLUETOOTH", NULL},   
};

	if(g_ucCommPort == COM_USB)
	{
		strcpy(stData[0].ucWidgetValue, "USB(*)");
		strcpy(stData[1].ucWidgetValue, "BLUETOOTH");	
	}
	else if(g_ucCommPort == COM_BLUETOOTH)
	{
		strcpy(stData[0].ucWidgetValue, "USB");
		strcpy(stData[1].ucWidgetValue, "BLUETOOTH(*)");	
	}
	else
	{
		strcpy(stData[0].ucWidgetValue, "USB");
		strcpy(stData[1].ucWidgetValue, "BLUETOOTH");	
	}

	iRet = EShowMenuList(EL_COMM_SET_COMM_PAGE, stData , WIDGET_NUM_MAX, &iSelected, 0, TAG_POS);
	if(iRet != 0)
	{
		ComDebugTx("Comm CommTypeSelect EShowMenuList iRet = %d\n", iRet);
		return iRet;
	}
	ComDebugTx("Comm CommTypeSelect EShowMenuList iSelected = %d\n", iSelected);

	switch(iSelected)
	{
		case 0:
			g_ucCommPort = COM_USB;
			iRet = SaveCommParam();
			if(iRet < 0)
			{
				return iRet;
			}
			break;
		case 1:
			g_ucCommPort = COM_BLUETOOTH;
			iRet = SaveCommParam();
			if(iRet < 0)
			{
				return iRet;
			}
			break;
		default:
			return -1;
	}
	return 0;
	
}

int MainMenu()
{
	int iRet = 0;
	int iSelected = 0;
	uchar ucKey = 0;
	char pDispStr[DISP_MAX_LEN+1] = "PLS DOWN PARAM FILE";

	if(PdkFile_Exist(UI_FILE_NAME) != PDK_RET_OK)
	{
		ScrCls();
		ScrPrint(0,2,0,"%s",pDispStr);
		ucKey = PubWaitKey(10);
		ScrCls();
		return -1;
	}

	iRet = EShowMenuList(EL_COMM_MAIN_PAGE, NULL , 0, &iSelected, 0, TAG_POS);
	if(iRet != 0)
	{
		ComDebugTx("Comm Main Menu EShowMenuList iRet = %d\n", iRet);
		return iRet;
	}
	//ComDebugTx("Comm Main Menu EShowMenuList iSelected = %d\n", iSelected);
	switch(iSelected)
	{
		case 0:
			CommTypeSelect();
			break;
		case 1:
			DispInfo(100);
			break;
		default:
			return -1;
	}
	return 0;

	
}

void InitComm()
{
	uchar ucRet = -1;

	if(g_UsbOpenFlag == 1)
	{
		PortClose(COM_USB);
		g_UsbOpenFlag = 0;
	}
	if(g_BtOpenFlag == 1)
	{
		PortClose(COM_BLUETOOTH);
		g_BtOpenFlag = 0;
	}

	ReadCommParam();

	#ifdef COMM_DEBUG
	ComDebugTx("InitComm g_ucCommPort = %d\n", g_ucCommPort);
	#endif
	
	switch(g_ucCommPort)
	{
	    case COM_USB:
			#ifdef COMM_DEBUG
			ComDebugTx("InitComm InitUsbCom \n");
			#endif
			InitUsbCom();
			break;
		case COM_BLUETOOTH:
			InitBlueTooth();
			break;
		default:
			break;
	}
}



void CommDispString(void *pszStr, ushort nPosition)
{
    uchar mode, x, y, ucLen, buffer[60];
    uchar ucReverFlag;

    if (pszStr == NULL)
    {
        return;
    }
    mode  = nPosition & 0x00f0;
    y     = nPosition & 0x000f;

    ucLen = strlen(pszStr);

    if (ucLen > NUM_MAXZHCHARS)
    {
        ucLen = NUM_MAXZHCHARS;
    }

    switch(mode)
    {
        case DISP_LINE_CENTER:
            //ScrClrLine(y, (uchar) (y + 1));
            x = (64 - ucLen * 4);
            break;

        case DISP_LINE_RIGHT:
            x = (128 - ucLen * 8);
            break;

        case DISP_LINE_LEFT:
        default:
            x = 0;
            break;
    }

    if (nPosition & DISP_SCR_CENTER)
    {
        //ScrCls();
        x = (64 - ucLen * 4);
        y = 3;
    }
    ucReverFlag = 0;

    if (nPosition & DISP_LINE_REVER || nPosition & DISP_PART_REVER)
    {
        ucReverFlag = REVER;
    }
    memset(buffer, 0, sizeof(buffer));
    memcpy(buffer, pszStr, ucLen);
	//ScrClrLine(y, (uchar)(y + 1));

    if (nPosition & DISP_LINE_REVER)
    {
        ScrPrint(0, y, CFONT | REVER, "%*s", NUM_MAXZHCHARS, "");
    }
    ScrPrint(x, y, (uchar)(CFONT | ucReverFlag), "%s", (char *)buffer);
}


//the pucErrMsg's max len is 59 bytes
void ComPoseErrMsg(RET_TO_STRING_CB vFunc, int MoudleReturnCode, int iErrCode, int iLineNum)
{
	int iOffset = 0;
	iOffset = sizeof(int);
	memset(g_pucErrMsg , 0, sizeof(g_pucErrMsg));
	
	sprintf(g_pucErrMsg,"%.*s%s%*d%s%*d%s", ERR_MSG_OFFSET-EL_INTERGER_STRING_LEN-EL_INTERGER_LINE_NUM_LEN-12,vFunc(MoudleReturnCode),"(Err:",EL_INTERGER_STRING_LEN, iErrCode,",Line:",EL_INTERGER_LINE_NUM_LEN,iLineNum,")");
	memcpy(ResponseBuf, g_pucErrMsg, ERR_MSG_OFFSET);
	
}





