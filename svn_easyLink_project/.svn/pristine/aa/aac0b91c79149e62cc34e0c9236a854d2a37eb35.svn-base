/*
 * ============================================================================
 * COPYRIGHT
 *              Pax CORPORATION PROPRIETARY INFORMATION
 *   This software is supplied under the terms of a license agreement or
 *   nondisclosure agreement with Pax Corporation and may not be copied
 *   or disclosed except in accordance with the terms in that agreement.
 *      Copyright (C) 2016 Pax Corporation. All rights reserved.
 * Module Date:2016/08/09     
 * Module Auth:huangwp     
 * Description:communication module
 *      
 * ============================================================================
 */


#include "..\inc\global.h"

static ushort usFileDownLoadCommand[] = 
	{
		EL_CMD_REMOTEDOWNLOAD_TASKINFO,
		EL_CMD_REMOTEDOWNLOAD_SAVEDATA,
		EL_CMD_REMOTEDOWNLOAD_TASKASK,	
		EL_CMD_GET_TERM_SN,
		EL_CMD_GET_TERM_EXTSN,
		EL_CMD_GET_TERM_VER_INFO,
		EL_CMD_GET_TERM_INFO,
	};

void InitUsbCom(void)
{
    uchar ucRet;

	ucRet = PortClose(COM_USB);
	ucRet = iMsgInit(g_ucCommPort, 9999, 900);

	if(ucRet!= 0x00){
		Lcdprintf("PortOpen:%02x", ucRet);
		getkey();
	}
	g_UsbOpenFlag = 1;
	DelayMs(500);
}

uchar ComDebugTx(char *psStr, ...)
{   
	uchar ucRet=0;
#ifdef APP_DEBUG
    va_list ap;  
    char buffer[BUF_LEN_2048];
	int i = 0;
	
	//TimerSet(13, (short)(1));
    //while(TimerCheck(13)!=0);
    memset(buffer, 0, sizeof(buffer));
	
    if(0 == g_UsbOpenFlag)
    {
        ucRet = PortOpen(COM_USB, "115200,8,n,1");
    }
    
    va_start(ap, psStr);       
    vsnprintf(buffer, BUF_LEN_2048, psStr, ap);  
    va_end(ap);  

    if(strlen(buffer) < 999)
    {
    	ucRet = PortSends(COM_USB, buffer, strlen(buffer)+1);
    }
	else
	{
		for(i = 0; i < strlen(buffer)/999; i ++)
		{
		    ucRet = PortSends(COM_USB, buffer, strlen(buffer +999*i)+1);
			DelayMs(500);
		}
	}
 
#endif
    return ucRet;
}


void InitComm(void)
{
	uchar ucRet = -1;

	ucRet = SystemInit();

	if(0 == ucRet)
	{
	     //app first time run   call UI to set comm type than save to app parameter  //to do
	     g_ucCommPort = COM_BLUETOOTH;
		 //g_ucCommPort = COM_USB;
	}
	else
	{
		//read from file block and give gloab var GlbCommPort //to do
		g_ucCommPort = COM_BLUETOOTH;
		//g_ucCommPort = COM_USB;
	}

	switch(g_ucCommPort)
	{
	    case COM_USB:
			InitUsbCom();
			break;
		case COM_BLUETOOTH:
			InitBlueTooth();
			break;
		default:
			break;
	}
}


ushort GetCommand(const uchar *pucMsgDataBuf)
{
    ushort iCommand = -1;
	
	iCommand = (pucMsgDataBuf[0] << 8) + pucMsgDataBuf[1];
	ComDebugTx("GetCommand pucMsgDataBuf[0] = %X\n", pucMsgDataBuf[0]);
	ComDebugTx("GetCommand pucMsgDataBuf[1] = %X\n", pucMsgDataBuf[1]);

	ComDebugTx("GetCommand type = %X\n", iCommand);

	return iCommand;
}

uchar *GetRequestData(uchar *pucMsgDataBuf)
{
    pucMsgDataBuf = pucMsgDataBuf + 2;
	ComDebugTx("GetRequestData GetRequestData = %s\n",pucMsgDataBuf);

	return pucMsgDataBuf;
}


int HandleRequest(const uchar *pucMsgDataBuf, uchar *pucMsgResponse, int *piResponseLen, ushort usCommand, uchar *ucSendResFlag)
{
	//uchar *pucData = NULL;
	int ReturnCode = 0;
	int i = 0;
	
	ComDebugTx("HandleRequest iCommand = %d\n", usCommand);

	//pucData = GetRequestData(pucMsgDataBuf);
	ComDebugTx("HandleRequest pucMsgDataBuf = %s\n", pucMsgDataBuf);

	switch(usCommand)
	{
		case EL_CMD_CONNECT:
			ReturnCode = Connect();
			ComDebugTx("HandleRequest command is COMMAND_CONNECT\n");
			AppHexLog("[HandleRequest] Value: ", pucMsgDataBuf, 27);
			break;

		case EL_CMD_DISCONNECT:
			ReturnCode = DisConnect(EL_LOGGIC_CONNECT);
			ComDebugTx("HandleRequest command is COMMAND_DISCONNECT\n");
			break;

		case EL_CMD_SHOW_MSG_BOX:
			ComDebugTx("HandleRequest command is COMMAND_SHOW_MSG_BOX\n");
			break;

		case EL_CMD_PED_GET_PIN_BLOCK:
			ReturnCode = GetPinBlock((char *)pucMsgDataBuf, (char *)pucMsgResponse, (unsigned int *)piResponseLen);
			ComDebugTx("HandleRequest command is COMMAND_PED_GET_PIN_BLOCK\n");
			break;

		case EL_CMD_PED_ENCRY_DATA:
			ReturnCode = EncryptData((char *)pucMsgDataBuf, (char *)pucMsgResponse, (unsigned int *)piResponseLen);
			ComDebugTx("HandleRequest command is COMMAND_PED_ENCRY_DATA\n");
			break;

		case EL_CMD_START_TRANSACTION:
			ReturnCode = StartTransaction();
			ComDebugTx("command is COMMAND_AUTHORIZE_CARD\n");
			break;

		case EL_CMD_COMPLETE_TRANSACTION:
			ReturnCode = CompleteTransaction();
			ComDebugTx("HandleRequest command is COMMAND_COMPLETE_ONLINE_TXN\n");
			break;

		case EL_CMD_SET_DATA:
			ComDebugTx("HandleRequest command is COMMAND_SET_DATA\n");
			ReturnCode = SetData(pucMsgDataBuf, pucMsgResponse, piResponseLen);
			break;

		case EL_CMD_GET_DATA:
			ComDebugTx("HandleRequest command is COMMAND_GET_DATA\n");
			ReturnCode = GetData(pucMsgDataBuf, pucMsgResponse, piResponseLen);
			break;

		case EL_CMD_FILE_DOWNLOAD:
			ComDebugTx("HandleRequest command is COMMAND_FILE_DOWNLOAD\n");
			break;

		case EL_CMD_SET_COMPATIBLE_MODE:
			ReturnCode = SetCompatiblaMode(pucMsgDataBuf);
			ComDebugTx("HandleRequest command is EL_CMD_SET_COMPATIBLE_MODE\n");
			break;

		case EL_CMD_REMOTEDOWNLOAD_TASKINFO:
			ReturnCode = RemoteDownload_TaskInfo(pucMsgDataBuf, pucMsgResponse, piResponseLen);
			ComDebugTx("HandleRequest command is EL_CMD_REMOTEDOWNLOAD_TASKINFO\n");			
			break;

		case EL_CMD_REMOTEDOWNLOAD_SAVEDATA:
			ReturnCode = RemoteDownload_SaveData(pucMsgDataBuf, pucMsgResponse, piResponseLen);
			ComDebugTx("command is EL_CMD_REMOTEDOWNLOAD_SAVEDATA\n");
			break;

		case EL_CMD_REMOTEDOWNLOAD_TASKASK:
			ReturnCode = RemoteDownload_TaskAsk(pucMsgDataBuf, pucMsgResponse, piResponseLen, ucSendResFlag);
			ComDebugTx("HandleRequest command is EL_CMD_REMOTEDOWNLOAD_TASKASK\n");
			break;

		case EL_CMD_GET_TERM_SN:
			ReturnCode = GetTermSN(pucMsgResponse, piResponseLen);
			ComDebugTx("HandleRequest command is EL_CMD_GET_TERM_SN\n");
			break;

		case EL_CMD_GET_TERM_EXTSN:
			ReturnCode = GetTermExtSN(pucMsgResponse, piResponseLen);
			ComDebugTx("HandleRequest command is EL_CMD_GET_TERM_EXTSN\n");
			break;
		case EL_CMD_GET_TERM_VER_INFO:
			ReturnCode = GetTermVerInfo(pucMsgResponse, piResponseLen);
			ComDebugTx("HandleRequest command is EL_CMD_GET_TERM_VER_INFO\n");
			break;

		case EL_CMD_GET_TERM_INFO:
			ReturnCode = GetTerminalInfo(pucMsgResponse, piResponseLen);
			ComDebugTx("HandleRequest command is EL_CMD_GET_TERM_INFO\n");
			break;

		default:
			return EL_CMD_NONE;

	}
	//send response
	return ReturnCode;
}



int Processor(void)
{
	int iRet = -1;
	int ResponsLen = 0;
	ushort iCommand = 0;
	uchar RecvBuf[BUF_LEN_2048] = {0};
	uchar ResponseBuf[BUF_LEN_2042] = {0};
	int iReturnCode = -1;
	uchar SendResponseFlag = 0;

	while(1)
	{   
		iRet = CheckPhysicConnectStatus(g_ucCommPort);
		if(iRet == EL_CMD_PHYSICAL_DISCONNECTED || iRet == -1)
		{
		      ComDebugTx("Processor EL_COMM_PHYSICAL_DISCONNECTED iRet = %d\n", iRet);
			  g_ConnectFlag = 0;
		      break;
		}
	    memset(RecvBuf,0,sizeof(RecvBuf));
		
		iRet = iReceiveRequest(sizeof(RecvBuf), RecvBuf, &iCommand, 1000);
		if(iRet < 0)
		{
		   	continue;
		}
		
		ComDebugTx("Processor receive buf = %s\n", RecvBuf);
		ComDebugTx("Processor receive iRet = %d\n", iRet);
		
		
		if(!g_ConnectFlag)
		{
		    ComDebugTx("Processor have not connect\n");
			if(iCommand != EL_CMD_CONNECT)
			{
			     continue;
			}
		}
		
		iReturnCode = HandleRequest(RecvBuf, ResponseBuf, &ResponsLen, iCommand, &SendResponseFlag);
		ComDebugTx("Processor receive iCommand = %d\n", iCommand);
		ComDebugTx("Processor receive iReturnCode = %d\n", iRet);
		if(EL_CMD_NONE == iReturnCode)
		{
		     ComDebugTx("Processor command error\n");
		}
		if(!SendResponseFlag)
		{
			iSendResponse(ResponseBuf, ResponsLen, iReturnCode, iCommand);
		}
		if(iCommand == EL_CMD_DISCONNECT)
		{
			iRet = DisConnect(EL_PHYSIC_CONNECT);
			if(iRet < 0)
			{
				return iRet;
			}
		}
	}

    return 0;
}


int Connect(void)
{
    if(!g_ConnectFlag)
    {
        g_ConnectFlag = 1;
		return EL_COMM_RET_CONNECT_SUCCESS;
    }
	else
	{
	   return EL_COMM_RET_CONNECTED; 
	}
}

int DisConnect(int iConnectType)
{
     int iRet = -1;
	 if(iConnectType == EL_LOGGIC_CONNECT)
	 {
	 	g_ConnectFlag = 0;
		iRet = 0;
	 }
	 else
	 {
		 switch(g_ucCommPort)
		 {
		     case COM_BLUETOOTH:
			 	iRet = BtIoCtrl(eBtCmdDropLink, 0, 0, 0, 0);
				if(iRet < 0)
		 		{
				     return EL_COMM_RET_DISCONNECT_FAIL;
		 		}
				DelayMs(500);
				iRet = BtIoCtrl(eBtCmdReset, 0, 0, 0, 0);
			    if(iRet < 0)
			    {
		    	 	return EL_COMM_RET_DISCONNECT_FAIL;
		 		}
				break;
				
		     case COM_USB:
			 	iRet = PortReset(COM_USB);
				break;
			 default:
			 	 break;
		 }
	 }
	 if(iRet < 0)
	 {
	     return EL_COMM_RET_DISCONNECT_FAIL;
	 } 	 
	 return EL_COMM_RET_CONNECT_SUCCESS;
}


int CheckPhysicConnectStatus(uchar iPort)
{
    int iRet = -1;
	
    switch(iPort)
	{
	    case COM_BLUETOOTH:
		{
			iRet = BtIoCtrl(T_eBtCmdGetLinkStatus, NULL, 0, NULL, 0);
			if (1 == iRet)
			{
				return EL_CMD_PHYSICAL_CONNECTED;
			}
			
			iRet=BtIoCtrl(T_eBtCmdGetPasskeyPairRequest, NULL, 0, NULL, 0);
			
			if(iRet == 1)
			{
				iRet = BtPairKey();
				ScrCls();
				return iRet;
			}
			return EL_CMD_PHYSICAL_DISCONNECTED;
	    }
		case COM_USB:
		{
			iRet = PortTxPoolCheck(COM_USB);
			if(0x03 == iRet)
			{
				return EL_CMD_PHYSICAL_DISCONNECTED;
			}
			return 0;
		}
		default:
			return -1;
	}
}


int isFindFileDownLoadCmd(ushort usCommand)
{
	int index = 0;

	int Len = 0;
	Len = sizeof(usFileDownLoadCommand);
	ComDebugTx("isFindFileDownLoadCmd usCommand = %X\n", usCommand);
    ComDebugTx("isFindFileDownLoadCmd Len = %d\n", Len);
	for(index = 0; index < Len/2; index++)
	{
	    ComDebugTx("isFindFileDownLoadCmd find command is usFileDownLoadCommand[%d] = %X\n", index, usFileDownLoadCommand[index]);
	    if(usCommand == usFileDownLoadCommand[index])
	    {
	        ComDebugTx("isFindFileDownLoadCmd find command is usFileDownLoadCommand[%d] = %X\n", index, usFileDownLoadCommand[index]);
	        return PROTOCOL_REMOTEDOWNLOAD_COMMAND;
	    }
	}

	return -1;
}

int SetCompatiblaMode(const uchar *pucMsgDataBuf)
{
     //ProtocolType = PROTOCOL_COMPATIBLE_MODE;
	 ComDebugTx("SetCompatiblaMode  = %X \n", pucMsgDataBuf);
	 if(!pucMsgDataBuf[0])
	 {
	     ProtocolType = PROTOCOL_NORMAL_MODE;
	 }
	 else
	 {
	     ProtocolType = PROTOCOL_COMPATIBLE_MODE;
	 }
	 return EL_RET_OK;
}



